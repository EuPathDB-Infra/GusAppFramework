#!/usr/bin/perl

## dumps sequences from sequence table 
##note the sequence must be returned as thelast item

## Brian Brunk 01/05/2000

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use CBIL::Bio::SequenceUtils;
use GUS::Supported::GusConfig;


my ($gusConfigFile,$debug,$verbose,$outFile,$idSQL,$minLength,$mscPercent, $noSeq,$posStrand,$negStrand,$allowEmptyOutput);
&GetOptions("verbose!"=> \$verbose,
            "outputFile=s" => \$outFile,"idSQL=s" => \$idSQL, 
            "minLength=i" => \$minLength,"debug!" => \$debug,
            "maxStopCodonPercent=i" => \$mscPercent,
            "gusConfigFile=s" => \$gusConfigFile,
            "noSequence!" => \$noSeq,
            "allowEmptyOutput!" => \$allowEmptyOutput,
            "posStrand=s" => \$posStrand, 
            "negStrand=s" => \$negStrand); 

if(!$idSQL || !$outFile){
	die "usage: gusExtractSequences --outputFile <outfile> --verbose --debug --idSQL 'sql stmt that returns (primary_identifier,arbritrary number of atts to be joined on defline by spaces,sequence)' --minLength <minimum length to output [1]> --maxStopCodonPercent <maxium multiple-stop-codons per 100 AA sequences [100]> --gusConfigFile [\$GUS_HOME/config/gus.config] --noSequence --allowEmptyOutput --posStrand <pos strand notation in idSQL defline,required for file of both strands> --negStrand <neg strand notation, substituted and required in file of both strands> \n";
}

##set the defaults
$minLength = $minLength ? $minLength : 1;

#It is optimal if we don't set the default, but filter only if this is set.
#$mscPercent = $mscPercent ? $mscPercent : 100;

print STDERR "Establishing dbi login\n" if $verbose;
my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName,
					$gusconfig->getOracleDefaultRollbackSegment());

my $dbh = $db->getQueryHandle();

my $CHUNK_SIZE;

my $dbVendor = $gusconfig->getDatabaseVendor();

$dbh->{LongReadLen} = 512 * 512 * 1024;

##want to be able to restart it....
my %done;
if(-e $outFile){
	open(F,"$outFile");
	while(<F>){
		if(/^\>(\S+)/){
			$done{$1} = 1;
		}
	}
	close F;
	print STDERR "Ignoring ".scalar(keys%done)." entries already dumped\n" if $verbose;
}

open(OUT,">>$outFile") || die "Can't open $outFile to append output\n Check write permission\n";

print STDERR "SQL: $idSQL\n" if $verbose;
my $count = 0;
my $skip = 0;

my $idStmt;



if($dbVendor eq 'Oracle') {
 $idStmt = $dbh->prepare($idSQL, { ora_auto_lob => 0 })  or die "Can't prepare SQL statement: " . $dbh->errstr();
}
else {
  $idStmt = $dbh->prepare($idSQL)  or die "Can't prepare SQL statement: " . $dbh->errstr();
}

$idStmt->execute();
my @ids;
while(my (@row) = $idStmt->fetchrow_array()){
  $count++;
  my $time = localtime(time());
  print STDERR "[$time] Getting id for $count\n" if $verbose && $count % 10000 == 0;
  next if exists $done{$row[0]};  ##don't put into hash if already have...
  &printSequence($dbh, \@row, $dbVendor);
}

$count = 2 * $count if ($posStrand && $negStrand);

my $countSeqInOutFile=`grep -c '>' $outFile`;

die "Inconsistant number of sequences between query results and outputs in $outFile. Please check log file.\n" unless (($countSeqInOutFile + $skip)==$count);

die "No sequences extracted. (Check your idSQL.)" unless ($count || $allowEmptyOutput);

sub printSequence{
	my ($dbh, $row, $dbVendor) = @_;

  my @row = @$row;
#	print STDERR "$gene_id,$na_id,$description,$number,$taxon,$assembly_id,$length,$seq_ver\n";


  my $lobLocOrSeq = pop(@row);

  my $sequence;
  if($noSeq) {}
  elsif($dbVendor eq 'Oracle') {
    $sequence = &readClob($lobLocOrSeq, $dbh);
  }
  else {
    $sequence = $lobLocOrSeq;
  }


  if(!$noSeq && length($sequence) < $minLength){
    print STDERR "Skipping: $row[0] too short: ",length($sequence),"\n";
    $skip++;
    return;
  }

  if ($mscPercent) {
	  my $aaLength = length ($sequence);	
	  my $aaCount = ($sequence =~ tr/[^A-Za-z]//);
	  my $aaStopCodonPercent = (($aaLength - $aaCount)/($aaLength)) * 100;
	  if ($aaStopCodonPercent > $mscPercent) {
  		print STDERR "Skipping: $row[0] has $aaStopCodonPercent\% stop codons\n";
		$skip++;
		return;
	  }
  }

	my $defline = "\>".join(' ',@row);
	$defline =~ s/\s+/ /g;
	$defline .= "\n";
	$noSeq ? print OUT $defline : print OUT $defline . CBIL::Bio::SequenceUtils::breakSequence($sequence,60);
        if ($posStrand && $negStrand) {
	  $defline =~ s/$posStrand/$negStrand/;
          my $negSeq = CBIL::Bio::SequenceUtils::reverseComplementSequence($sequence);
	  print OUT $defline . CBIL::Bio::SequenceUtils::breakSequence($negSeq,60) unless $noSeq;
	}
}

sub readClob {
  my ($lobLocator, $dbh) = @_;

  my $chunkSize = defined $CHUNK_SIZE ? $CHUNK_SIZE : $dbh->ora_lob_chunk_size($lobLocator);

  my $offset = 1;   # Offsets start at 1, not 0

  my $output;

  while(1) {
    my $data = $dbh->ora_lob_read($lobLocator, $offset, $chunkSize );
    last unless length $data;
    $output .= $data;
    $offset += $chunkSize;
  }

  return $output;
}




