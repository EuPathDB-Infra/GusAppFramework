#!@perlLocation@

## Prints simple XML for tuples in the database.
## --recursive recursively retrieves all foreign key relationships
## and also prints those....should be used with care.

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Common::GusConfig;

my ($table,$id,$deep,$verbose,$debug,$attHash,$group,$user);
&GetOptions("table=s" => \$table,
	    "id=i"=> \$id, 
	    'recursive!' => \$deep,
            "verbose!" => \$verbose, 
	    "debug!" => \$debug, 
	    "attHash=s" => \$attHash,
            'group=i' => \$group,
	    'user=i' => \$user
	    );


$| = 1;

if((!$id && !$attHash) || !$table){ die "usage: printXML --table <tablename> --id <identifier> --attHash '{\"att1\" => val}' --recursive (if you want to retrieve all children from the db)\n\teg: printXML --table Gene --id 10 --recursive --user <user_id> --group <group_id>\n"; }

my $gusconfigfile = "$ENV{GUS_CONFIG_FILE}";

my $gusconfig = GUS::Common::GusConfig->new($gusconfigfile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$gusconfig->getReadOnlyDatabaseLogin(),
					$gusconfig->getReadOnlyDatabasePassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName);
$db->setUseDbiTableOnly(1);

eval("require $table");
my $obj;
if($attHash){
  $obj = $table->new(eval($attHash));
}else{
  $obj = $table->new();
}
$obj->setDebuggingOn() if $debug;
$obj->setDefaultUserId($user) if $user;
$obj->setDefaultGroupId($group) if defined $group;
my $pk = $obj->getTable()->getPrimaryKey();
if($id){ $obj->set($pk,$id);}
  
if($obj->retrieveFromDB()){
  $obj->retrieveAllChildrenFromDB(1) if $deep;
  print $obj->toXML(0,1);
}else{
  print "Unable to retrieve $table object from database \n",$obj->toXML(2,1);
}
