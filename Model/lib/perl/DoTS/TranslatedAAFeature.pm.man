
package GUS::Model::DoTS::TranslatedAAFeature; # table name

use strict;
use GUS::Model::DoTS::TranslatedAAFeature_Row;
use CBIL::Bio::SequenceUtils;
use GUS::Model::SRes::GeneticCode;

my $debug = 0;

use vars qw (@ISA);
@ISA = qw (GUS::Model::DoTS::TranslatedAAFeature_Row);

sub translateFeatureSequenceFromNASequence {
  my($self,$codon_table) = @_;
  my $ct;
  if (!exists $self->{'transSeq'}){
    if(!defined($codon_table)){  ##test to see if is null
      ##need to figure out codon_table;
      ##first get the NASequence object
      my $naseq = $self->getParent('DoTS::Transcript',1)->getParent('DoTS::GeneFeature',1)->getParent('DoTS::NASequence',1);
      ##getTaxonobject
      my $taxon = $naseq->getParent('SRES::Taxon',1);
      ##test to see if mito vs. chromosomal
      ##get SO object
      my $so = $naseq->getParent('SRes::OntologyTerm',1);
      if($so->getName() eq 'mitochondrial_chromosome'){
        ##create codontable object
        my $cod = GUS::Model::SRes::GeneticCode->new({'genetic_code_id' => $taxon->getMitochondrialGeneticCodeId()});
        $cod->retrieveFromDB();
        $ct = $cod->getNcbiGeneticCodeId();  
#     }elsif(){  ##test to see if apicoplast but then what???      
#       ##if all apicoplast use same table then can hard code the number here
      }else{  ##must be chromosomal
        ##create codontable object
        my $cod = GUS::Model::SRes::GeneticCode->new({'genetic_code_id' => $taxon->getGeneticCodeId()});
        $cod->retrieveFromDB();
        $ct = $cod->getNcbiGeneticCodeId();  
      }
    }else{
      $ct = $codon_table;
    }
#    $ct = defined($codon_table) ? $codon_table : 0;  ##comment this out when uncommenting rest!!!
    my $seq = CBIL::Bio::SequenceUtils::translateSequence($self->getFeatureNASequence(),$ct);
    $seq =~ s/\*+$//;
    $self->{'transSeq'} = $seq;
#	print STDERR "\$ct = $ct\n";
  }
  return $self->{'transSeq'};
}

sub getFeatureSequence {
  my $self = shift;
  if (!exists $self->{'sequence'}) {
    
    my $seq = $self->getParent('DoTS::AASequence',1)->getSequence();
    if(!$seq){
      $self->{sequence} = $self->translateFeatureSequenceFromNASequence()
    }else{
      my($start,$stop) = $self->getFeatureLocation();
      if ($stop) { ##have a valid location
        substr($seq,$start - 1,$stop-$start+1);
      } else {
        $self->{'sequence'} =  $seq; ##return the entire sequence..
      }
    }
  }
  return $self->{'sequence'};
}


sub getFeatureNASequence {
  my $self = shift;
  if(!$self->{featureNASequence}) {
    my @segs = sort { $a->getAaStartPos() <=> $b->getAaStartPos() } $self->getChildren('DoTS::TranslatedAAFeatSeg',1);
    if(scalar(@segs) > 0 ) {
      foreach my $s (@segs) {
        $self->{featureNASequence} .= $s->getNASequenceSegment();
      }
    } else {
      my $start = $self->getTranslationStart();
      my $stop = $self->getTranslationStop();
      my $rna = $self->getParent('DoTS::RNAFeature',1);
      if(!$rna){
        $rna =  $self->getParent('DoTS::Transcript',1);
      }
      if(!$start || !$stop){
        ($start,$stop) = $rna->getTranslationStartStop();
        ## set these attributes.
        $self->setTranslationStart($start);
        $self->setTranslationStop($stop);
      }

      print STDERR "TranslatedAAFeature->getFeatureNASequence: \$rna->getFeatureSequence()=", $rna->getFeatureSequence(), "\n" if $debug;

      $self->{'featureNASequence'} =  substr($rna->getFeatureSequence(),$start-1,$stop-$start + 1);
    }
  }
  return $self->{featureNASequence};

}

1;
