#!@perl@

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Bio::SeqFeature::Tools::Unflattener;
use Bio::Tools::GFF;
use Bio::Seq::RichSeq;
use GUS::Supported::SequenceIterator;
use Bio::DB::GFF::Aggregator;
use Getopt::Long;

use Data::Dumper;

my ($format,$fileOrDir, $xmlOutput, $unflatten, $gff2GroupTag, $verbose, $help);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'format=s' => \$format,
            'file_or_dir=s' => \$fileOrDir,
            'xmlOutput' => \$xmlOutput,
            'unflatten' => \$unflatten,
            'gff2GroupTag=s' => \$gff2GroupTag,

           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $format && $fileOrDir);
&usage("gff2 files require gff2GroupTag argument") if($format eq 'gff2' && !($gff2GroupTag));




die "File or directory '$fileOrDir' does not exist\n" unless -e $fileOrDir;

my @files;
if (-d $fileOrDir) {
  opendir(DIR, $fileOrDir) || die "Can't open directory '$fileOrDir'";
  my @noDotFiles = grep { $_ ne '.' && $_ ne '..' } readdir(DIR);
  @files = map { "$fileOrDir/$_" } @noDotFiles;
} else {
  $files[0] = $fileOrDir;
}

my $features = {};
my %featureCounts;

my $unflattener = Bio::SeqFeature::Tools::Unflattener->new();

foreach my $file (@files) {
  my $bioperlSeqIO;


  if ($format =~ m/^gff([2|3])$/i) {

    $bioperlSeqIO = &convertGFFStreamToSeqIO($file,$1,$gff2GroupTag);

  } else {
 	$bioperlSeqIO = Bio::SeqIO->new(-format => $format,   -file   => $file);
}	

  while (my $bioperlSeq = $bioperlSeqIO->next_seq() ) {

    if ($unflatten && ($format eq 'genbank') || ($format eq 'embl')) {

      $unflattener->unflatten_seq(-seq => $bioperlSeq,
				  -use_magic => 1);
    }

    foreach my $bioperlFeature ($bioperlSeq->get_SeqFeatures()) {
      processFeature($bioperlFeature, "root");
    }
  }
}

sub processFeature {
  my ($bioperlFeature, $parent) = @_;

  my $feature = $bioperlFeature->primary_tag();
  $featureCounts{$feature}->{$parent}++;
  foreach my $qualifier ($bioperlFeature->get_all_tags()) {
    $features->{$feature}->{$parent}->{$qualifier}++;
  }

  for my $subFeature ($bioperlFeature->get_SeqFeatures()) {
    processFeature($subFeature, $feature);
  }
}

if ($xmlOutput) {
  my $header = <<HEADER;
<mapping>

  <specialCaseQualifierHandler name="standard" 
           class="GUS::Supported::SpecialCaseQualifierHandlers"/>

HEADER

  print $header;
  foreach my $feature (sort(keys %{$features})) {
    print "  <feature name=\"$feature\" table=\"\" so=\"\">\n";
    foreach my $parent (sort(keys %{$features->{$feature}})) {
      foreach my $qualifier (sort(keys %{$features->{$feature}->{$parent}})) {
	print "    <qualifier name=\"$qualifier\" parent=\"$parent\"/>\n";
      }
    }
    print "  </feature>\n\n";
  }
  print "</mapping>/n";
} else {
  foreach my $feature (sort(keys %{$features})) {
    foreach my $parent (sort(keys %{$features->{$feature}})) {
      print "$feature:$parent ($featureCounts{$feature}->{$parent})\n";
      foreach my $qualifier (sort(keys %{$features->{$feature}->{$parent}})) {
	print "  $qualifier ($features->{$feature}->{$parent}->{$qualifier})\n";
      }
      print "\n";
    }
  }
}


sub usage {
  die
"
Report the features and qualifiers used in a sequence features file

Usage: reportFeatureQualifers --format --file_or_dir [--xmlOutput --noUnflatten]

where
  --format:       embl, genbank, tigr (or any format supported by bioperl's SeqIO)
  --file_or_dir:    a seq/feature file, or a directory containing a set of them
  --xmlOutput:   if present, the output is a template in 'mapping file XML' 
                format as expected by the InsertSequenceFeatures plugin.
  --unflatten  if present, use bioperl's unflattener (only applicable
                to genbank and embl)
  --gff2Group  if present, specify gff2 group tag (only applicable
                to gff2)
";
}

sub convertGFFStreamToSeqIO {

  my ($inputFile, $gffVersion, $gff2GroupTag) = @_;

  # convert a GFF "features-referring-to-sequence" stream into a
  # "sequences-with-features" stream; also aggregate grouped features.

  die("For now, gff formats only support a single file") if (-d $inputFile);

  my @aggregators = &makeAggregators($inputFile,$gffVersion,$gff2GroupTag);

  my $gffIO = Bio::Tools::GFF->new(-file => $inputFile,
				   -gff_format => $gffVersion
				  );

  my %seqs; my @seqs;
  while (my $feature = $gffIO->next_feature()) {
    push @{$seqs{$feature->seq_id}}, $feature;
  }

  while (my ($seq_id, $features) = each %seqs) {
    my $seq = Bio::Seq::RichSeq->new( -alphabet => 'dna',
                             -molecule => 'dna',
                             -molecule => 'dna',
			     -display_id => $seq_id,
			     -accession_number => $seq_id,
			   );

    if ($gffVersion < 3) {
      # GFF2 - use group aggregators to re-nest subfeatures
      for my $aggregator (@aggregators) {
	$aggregator->aggregate($features);
      }
    } else {
      # GFF3 - use explicit ID/Parent hierarchy to re-nest
      # subfeatures

      my %top;      # associative list of top-level features: $id => $feature
      my %children; # mapping of parents to children:
                    # $parent_id => [ [$child_id, $child],
                    #                 [$child_id, $child],
                    #               ]
      my @keep;     # list of features to replace flat feature list.

      # first, fill the datastructures we'll use to rebuild
      for my $feature (@$features) {
	my $id = 0;
	($id) = $feature->each_tag_value("ID")
	  if $feature->has_tag("ID");

	if ($feature->has_tag("Parent")) {
	  for my $parent ($feature->each_tag_value("Parent")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	}  elsif ($feature->has_tag("Derives_from")) {
	  for my $parent ($feature->each_tag_value("Derives_from")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	} else {
	  push @keep, $feature;
	  $top{$id} = $feature if $id; # only features with IDs can
	                               # have children
	}
      }

      while (my ($id, $feature) = each %top) {
	# build a stack of children to be associated with their
	# parent feature:
	# [$child_id, $child_feature, $parent_feature]
	my @children;
	if($children{$id}){
	
	  foreach my $col (@{$children{$id}}){


	    push @children ,[@$col,$feature];

	      
	  }
	}
	delete($children{$id});

	# now iterate over the stack until empty:
        foreach my $child (@children) {

	  my ($child_id, $child, $parent) = @$child;
	  # make the association:
	  if($parent->location->start() > $child->location->start()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->start($child->location->start());
	  }

	  if($parent->location->end() < $child->location->end()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->end($child->location->end());
	  }

	  $parent->add_SeqFeature($child);

	  # add to the stack any nested children of this child
	  if($children{$child_id}){
	

	    foreach my $col (@{$children{$child_id}}){

	      push @children ,[@$col,$child];
	      
	    }
	  }
	  delete($children{$child_id});
	}
      }

      # the entire contents of %children should now have been
      # processed:
      if (keys %children) {
	warn "Unassociated children features (missing parents):\n  ";
	warn join("  \n", keys %children), "\n";
      }

      # replace original feature list with new nested versions:
      @$features = @keep;
    }

    $seq->add_SeqFeature($_) for @$features;
    push @seqs, $seq;
  }

  return GUS::Supported::SequenceIterator->new(\@seqs);
}

sub makeAggregators {
  my ($inputFile, $gffVersion,$gff2GroupTag) = @_;

  return undef if ($gffVersion != 2);

  die("Must supply --gff2GroupTag if using GFF2 format") unless $gff2GroupTag;

  # a list of "standard" feature aggregator types for GFF2 support;
  # only "processed_transcript" for now, but leaving room for others
  # if necessary.
  my @aggregators = qw(Bio::DB::GFF::Aggregator::processed_transcript Bio::DB::GFF::Aggregator::transcript);

  # build Feature::Aggregator objects for each aggregator type:
  @aggregators =
    map {
      Feature::Aggregator->new($_, $gff2GroupTag);
    } @aggregators;
  return @aggregators;
}
