package GUS::Model::DoTS::GeneFeature; # table name

# $Id$

use strict;
use GUS::Model::DoTS::GeneFeature_Row;

use GUS::Model::DoTS::RNAFeature;
use GUS::Model::DoTS::TranslatedAAFeature;
use GUS::Model::DoTS::TranslatedAASequence;
use GUS::Model::DoTS::SplicedNASequence;
use GUS::Model::DoTS::RNAFeatureExon;


use vars qw (@ISA);
@ISA = qw (GUS::Model::DoTS::GeneFeature_Row);

my $debug = 0;

##method for returning string of genbank like location...
sub getGBLocation {
  my $self = shift;
  if(!exists $self->{gblocation}){
    my @loc;
    my @exons = $self->getChildren('DoTS::ExonFeature',1);
    return unless scalar(@exons) >= 1;
    my $naloc = $exons[0]->getChild('DoTS::NALocation',1);
    return unless $naloc;
    my $isRev = $naloc->getIsReversed();
    my @sort = $isRev ? sort {$b->getOrderNumber() <=> $a->getOrderNumber()} @exons : sort {$a->getOrderNumber() <=> $b->getOrderNumber()} @exons;
    foreach my $exon (@sort) {
      my $l = $exon->getChild('DoTS::NALocation',1);
      next  unless $l;
#      print STDERR $self->getId(),": ",$exon->getOrderNumber(),", ",$l->getStartMin(),"..",$l->getEndMin(),"\n";
      push (@loc,$l->getStartMin()."..".$l->getEndMin());
    }
    my $loc;
    $loc = 'complement(' if $isRev;
    $loc .= 'join(' if scalar(@loc) > 1;
    $loc .= join(',',@loc);
    $loc .= ')' if scalar(@loc) > 1;
    $loc .= ')' if $isRev;
    $self->{gblocation} = $loc;
  }
  return $self->{gblocation};
}


##method for filling in the RNA and Protein features and sequences from this GeneFeature
##take in optional external_database_release_id and source_id as args.
sub makePredictedRna {
	my($self,$exons,$external_database_release_id,$source_id) = @_;

	print STDERR "GeneFeature->makePredictedRna($exons,$external_database_release_id,$source_id)\n" if $debug;

	my @exFeats;
	if(defined $exons){
		@exFeats = @{$exons};
	}else{
		@exFeats = $self->getChildren('DoTS::ExonFeature',1);
		print STDERR "GeneFeature->makeRNAtoProtein():  You must add the ExonFeature children or pass in an array reference of exons before calling this method\n" if scalar(@exFeats) == 0;
	}
	if(scalar(@exFeats) < 1){
		print STDERR $self->getClassName()."->makeRnaToProtein ERROR: No exons found for this GeneFeature,\n  usage:\n\tmakePredictedRna(array reference of ExonFeature objects (optional if using all exons),\$external_database_release_id (optional),\$source_id (optional))\n";
		return undef;
	}

	my $doExternal = ($external_database_release_id && $source_id) ? 1 : 0;
	my $pred_alg_id = $self->get('prediction_algorithm_id');

#	my @exons = $self->getChildren('DoTS::ExonFeature',1);
#	if(scalar(@exons) < 1){
#		print STDERR "GeneFeature->makeRNAtoProtein():  You must add the ExonFeature children before calling this method\n";
#		return undef;
#	}

	##set values in self that this implies
#	$self->set('is_predicted',1) unless $self->get('is_predicted');

	##first the RNAFeature
	my $rna = GUS::Model::DoTS::RNAFeature->new({'subclass_view' => 'RNAFeature',
						     'name' => 'RNAFeature'
						     });
	$self->setExternalDbAndSourceId($rna,$external_database_release_id,$source_id) if $doExternal;
	$rna->set('is_predicted',1) if defined $self->get('is_predicted');
	$rna->set('prediction_algorithm_id',$pred_alg_id) if $pred_alg_id;
	$rna->set('number_of_exons',scalar(@exFeats));
	$rna->set('review_status_id',0);
	$self->addChild($rna);

	##what about RNAFeatureExons...could not set if ! $self->get('is_differentially_processed')
	foreach my $exon (@exFeats){
		my $re = GUS::Model::DoTS::RNAFeatureExon->new();
		$re->setParent($rna);
		$re->setParent($exon);
	}

		##now the SplicedNASequence
	my $nas = GUS::Model::DoTS::SplicedNASequence->new({'subclass_view' => 'SplicedNASequence',
							    'name' => 'SplicedNASequence',
							    'sequence_type_id' => 13
							    });
	$nas->addChild($rna);
	$self->setExternalDbAndSourceId($nas,$external_database_release_id,$source_id) if $doExternal;
	$nas->set('length',$rna->getFeatureLength());
  if($self->getParent('DoTS::ExternalNASequence')){ $nas->setSequence($nas->getSequence());}

	return $rna;
}

##NOTE:  this method takes in a list of exons so can be used for differential splicing..
sub makePredictedRnaToProtein {
	my($self,$exons,$external_database_release_id,$source_id) = @_;

	my $doExternal = ($external_database_release_id && $source_id) ? 1 : 0;
	my $pred_alg_id = $self->get('prediction_algorithm_id');

	print STDERR "GeneFeature->makePredictedRnaToProtein($exons,$external_database_release_id,$source_id)\n" if $debug;
	print STDERR "GeneFeature->makePredictedRnaToProtein: Number of exons = ".scalar(@$exons)."\n" if $debug;

	my $rna = $self->makePredictedRna($exons,$external_database_release_id,$source_id);

	if (!$rna) { return undef; } 

	##the TranslatedAAFeature
	my $aaf = GUS::Model::DoTS::TranslatedAAFeature->new({'subclass_view' => 'TranslatedAAFeature',
							      'is_simple' => 1,
							      'review_status_id' => 0
							      });
	$aaf->setParent($rna);
	$aaf->set('is_predicted',defined $self->get('is_predicted') ? $self->getIsPredicted() : 1);
	$aaf->set('prediction_algorithm_id',$pred_alg_id) if $pred_alg_id;
	##what about translation_start and stop??
	my ($tranStart,$tranStop) = $rna->getTranslationStartStop();
	$aaf->set('translation_start',$tranStart);
	$aaf->set('translation_stop',$tranStop);
	
	##the TranslatedAASequence
	my $aas = GUS::Model::DoTS::TranslatedAASequence->new({'subclass_view' => 'TranslatedAASequence',
							       'sequence_version' => 1,
							       'is_simple' => 1  ##this method is only for simple translations...
							       } );
	my $tranLength = int(($tranStop - $tranStart + 1) / 3);
	if($tranLength > 1){ $aas->setLength($tranLength); }  ##only set if tranLength is valid number...
  if($self->getParent('DoTS::ExternalNASequence')){ $aas->setSequence($aas->getSequence());}
	$self->setExternalDbAndSourceId($aas,$external_database_release_id,$source_id) if $doExternal;
	$aas->addChild($aaf);

	return 1;
}

sub setExternalDbAndSourceId {
	my($self,$o,$ext_db,$source_id) = @_;
	$o->set('external_database_release_id',$ext_db);
	$o->set('source_id',$source_id);
}

1;
