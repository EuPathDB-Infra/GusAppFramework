#!@perl@

## reads through a set of genbank files (each possibly zipped) and produces
## a single file containing the entries that pass a filter
##
## for now, the filter can have two parts:
##  1. a list of accession number ranges
##  2. a regex for source

use strict;
use Getopt::Long;
use FileHandle;
use Data::Dumper;

my ($targetFile, $inputFiles, $accFilterArg, $lineFiltersArg);
&GetOptions("targetFile=s" => \$targetFile,
	    "inputFiles=s" => \$inputFiles,
	    "accFilter=s" => \$accFilterArg,
	    "lineFilters=s" => \$lineFiltersArg);

&usage() unless ($targetFile && $inputFiles 
		 && ($accFilterArg || $lineFiltersArg));

my $accessionFilter = &makeAccFilter($accFilterArg);
my $lineFilters = &makeLineFilters($lineFiltersArg);

my @inputFiles = glob($inputFiles);

foreach my $inputFile (@inputFiles) {

  -e $inputFile || die "Input file $inputFile does not exist\n"; 

  my $f  = ($inputFile =~ /\.gz$|\.Z$/) ? "zcat $inputFile|" : '<'. $inputFile;
  my $inputFh = FileHandle->new($f);
  die "Can't open file $inputFile\n" unless $inputFh;

  print STDERR "processing $inputFile\n";

  my $outputFh = FileHandle->new(">$targetFile");

  while (&processEntry($inputFh, $outputFh, $accessionFilter, $lineFilters)) {}
  close($inputFh);
}


#################### subroutines  #################################

sub processEntry {
  my ($inputFileHandle, $outputFileHandle, $accessionFilter, $lineFilters) = @_;

  my @lines;

  my $passedAccessionFilter;
  my @passedLineFilters;
  $#passedLineFilters = scalar(@$lineFilters) -1;

  my $handleHeader = 1;
  while ( <$inputFileHandle> ) {

    my $line = $_;

    # skip header lines beginning with space or file identifier (eg, GBHTC1.SEQ)
    if ($handleHeader) {
      next if ($line =~ /^\s/ || $line =~ /^\w+\./);
      $handleHeader = 0;
    }

    $passedAccessionFilter |= &checkAccessionFilter($accessionFilter, $line);
    my $i = 0;
    foreach my $lineFilter (@$lineFilters) {
      $passedLineFilters[$i++] |= &checkLineFilter($lineFilter, $line);
    }
      
    push(@lines, $_);

    last if /^\/\//;
  }

  my $passedLineFilters = 1;
  foreach my $passedFlag (@passedLineFilters) {
    $passedLineFilters &= $passedFlag;
  }

  &writeEntry(\@lines, $outputFileHandle)
    if ($passedAccessionFilter && $passedLineFilters);

  return scalar(@lines);
}

sub checkAccessionFilter {
  my ($accessionFilter, $line) = @_;
  return 1 if (!$accessionFilter);
  if ($line =~ /^ACCESSION\s+(\w+)/) {
    return $accessionFilter->{$1};
  } else {
    return 0;
  }
}

sub checkLineFilter {
  my ($lineFilter, $line) = @_;

  return $line =~ /$lineFilter/;
}

sub writeEntry {
  my ($lines, $outputFileHandle) = @_;
  foreach my $line (@$lines) {
    print $outputFileHandle $line;
  }
}

sub makeAccFilter {
  my ($accFilterString) = @_;

  return undef if (!$accFilterString);

  my %accFilter;
  my @accFilter = split(/\s*,\s*/, $accFilterString);
  foreach my $a (@accFilter) {
    if ($a =~ /^\w+$/) { 
      $accFilter{$a} = 1; 
    } elsif ($a =~ /^([A-Z]+)(\d+)\s*-\s*([A-Z]+)(\d+)$/) {
      die "mismatched accession prefixes: '$a'" if ($1 ne $3);
      die "invalid accession range: '$a'" if ($2 >= $4);
      for (my $i=$2; $i<=$4; $i++) {
	$accFilter{"$1$i"} = 1;
      }
    } else {
      die "invalid accession filter element: '$a'\n";
    }
  }

  return \%accFilter;
}

sub makeLineFilters {
  my ($lineFiltersString) = @_;
  my @lineFilters = split(/,\s*/, $lineFiltersString);
  return undef if (!$lineFiltersString);
  return \@lineFilters;
}

sub usage {

  print "
Filter a set of entries from a set of GenBank files into one target file.

usage: genbankFileFilter --targetFile target_file --inputFiles input_files_specifier [--accFilter acc_filter] [--lineFilters line_filters]

where:
  targetFile: the file to create
  inputFiles: a glob specifying one or more, possibly gzipped, GenBank files
  accFilter:  a list of Accessions to keep, of the form 
              D102234, AC199953-AC100058, G223321, ....  
              In other words, elements of the list can be individual accessions
              or a range of accessions (with the same prefix)
              If not accFilter provided, keep all accessions
  lineFilters: a comma delimited list of regexes to run against the lines in 
               the file.  If provided, a record must match all of the regexes.
               (eg --lineFilters ^\\s+ORGANISM\s+homo sapiens)
At least one filter must be provided.
";
  exit;
}
