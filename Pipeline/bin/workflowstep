#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";

use strict;
use GUS::Pipeline::Workflow::WorkflowHandle;
use GUS::Pipeline::Workflow::WorkflowStep;

# these should be imported from someplace, not duplicated here
my $READY = 'READY';      # my parents are not done yet  -- default state
my $ON_DECK = 'ON_DECK';  # my parents are done, but there is no slot for me
my $FAILED = 'FAILED';
my $DONE = 'DONE';
my $RUNNING = 'RUNNING';

&usage unless (scalar(@ARGV) >= 3);

my $homeDir = $ARGV[0];
my $stepName = $ARGV[1];
my $offline;
my $state;
if ($ARGV[2] eq 'offline' || $ARGV[2] eq 'online') {
  $offline = $ARGV[2];
  $state = $ARGV[3];
} else {
  $state = $ARGV[2]
}
&usage unless ($offline || ($state eq 'kill' || $state eq 'ready'));

my $workflow = GUS::Pipeline::Workflow::WorkflowHandle->new($homeDir);

my $step = GUS::Pipeline::Workflow::WorkflowStep->new($stepName, $workflow);

if ($state eq 'ready') {
  $step->pilotSetReady();
} elsif ($state eq 'kill') {
  $step->pilotKill();
}

if ($offline) {
  $step->pilotSetOffline($offline);
}

sub usage {
    print "

Change the state and/or offline status of a workflow step.

Usage: workflowstep workflow_dir stepname [offline|online] [ready|kill]

Allowed state changes are:
  $FAILED  --> ready
  $RUNNING --> kill

Offline status may not be changed when the step is $RUNNING

Examples
  % workflowstep workflow_dir my_step kill

  % workflowstep workflow_dir my_step online

  % workflowstep workflow_dir my_step offline ready
";
    exit(1);
}




