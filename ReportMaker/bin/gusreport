#!@perl@

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;

my ($verbose, $sql, $dbLogin, $dbPassword, $configModule, $tempTableName,
    $requestedCols, $listColumns, $mappedToName, 
    $primaryKeyName, $primaryKeyPrefix, $mappingTables);

&GetOptions("verbose!"=> \$verbose,
	    "sql=s" => \$sql,
	    "dbLogin=s" => \$dbLogin,
	    "dbPassword=s" => \$dbPassword,
	    "configModule=s" => \$configModule,
	    "tempTableName=s" => \$tempTableName,
	    "primaryKeyColumnName=s" => \$primaryKeyName,
	    "primaryKeyPrefix=s" => \$primaryKeyPrefix,
	    "mappedToColumnName=s" => \$mappedToName,
	    "mappingTables=s" => \$mappingTables,
	    "listColumns!" => \$listColumns,
	    "requestedColumns=s" => \$requestedCols);

$primaryKeyPrefix = '' unless $primaryKeyPrefix;
$primaryKeyName = 'primary_key' unless $primaryKeyName;
$mappedToName = 'mapped_id' unless $mappedToName;

&usage() unless ($configModule
		 && ($listColumns
		     || ($tempTableName && $requestedCols)));

eval "use $configModule";
die "$@\n" if $@;

my $report = &createReport($tempTableName, $primaryKeyName, $mappedToName,
			   $mappingTables);

if ($listColumns) {
  $report->listColumns();
  exit(0);
}

my @requestedColumnsList = split(/,\s*/, $requestedCols);

$report->validateColumnsRequest(\@requestedColumnsList);

my $gusconfig = GUS::Supported::GusConfig->new();

$dbLogin = $gusconfig->getDatabaseLogin() unless $dbLogin;
$dbPassword = $gusconfig->getDatabasePassword() unless $dbPassword;

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
					$dbLogin,
					$dbPassword,
					$verbose,0,1,
					$gusconfig->getCoreSchemaName(),
					$gusconfig->getOracleDefaultRollbackSegment());

eval {
  &makeTempTable($tempTableName, $db, $sql, $primaryKeyName, 
		 $mappedToName) if $sql;

  $report->print($primaryKeyName, $primaryKeyPrefix, \@requestedColumnsList, 
		 $tempTableName, $db, $verbose);
};

&dropTempTable($tempTableName, $db) if $sql;

die "$@\n" if $@;


########################### subroutines ###################################

sub makeTempTable {
    my ($tempTableName, $db, $sql, $primaryKeyColumn, $mappedToColumn) = @_;

    my $dbh = $db->getDbHandle();

    my $createTableSql = 
"create table $tempTableName (
  $primaryKeyColumn number not null,
  $mappedToColumn varchar(255)
)
";
    $dbh->do($createTableSql);
    $dbh->do("insert into $tempTableName ($sql)");
    $dbh->commit();
}

sub dropTempTable {
    my ($tempTableName, $db) = @_;

    my $dbh = $db->getDbHandle();
    my $stmt  = $dbh->do("drop table $tempTableName");
    $dbh->commit();
    $db->logout();
}

sub usage {
  print STDERR "
USAGE

   gusreport --configModule modulename --listColumns

   gusreport --configModule modulename [--sql sqlstring] --dbLogin login 
             --dbPassword password --tempTableName name 
             --requestedColumns columnslist
             [--primaryKeyColumnName columnname]
             [--primaryKeyPrefix prefix]
             [--mappedToColumnName columnname]
             [--mappingTables mapping_tables_list]


DESCRIPTION

gusreport prints a tab-delimited report of information about a set of GUS 
entities.

You provide three main things:
 1. a configuration module that tells the report maker how to make the 
    columns in the report.

 2. a result set that contains the primary keys of the entities you would 
    like a report for, second, nullable, column that provides a string 
    value that the primary key has been mapped to (eg, an external accession).

 3. a list of columns you want included in your report.

The first form of gusreport simply lists the columns that the provided 
config module makes available.

The second form of gusreport prints the report. 


There are two ways to provide your result set:
 1. use the --sql argument to provide an sql statement that specifies 
    the set of entities to report on.  

    The sql statement must return two columns:
      - primary key for each entity.  This may not be null. 

      - a string to which the primary key has been mapped 
       (eg, and external accession).  This may be null.

 2. provide a temp table with that result set already loaded, in which 
    case, do not provide the --sql argument

In either case, you must provide the --tempTableName argument.

Use the optional --primaryKeyColumnName arg to specify the name of the primary 
key column.  By default it is 'primary_key'.

use the optional --primaryKeyPrefix to specify a string that should be prepended
to the primary key column values.  By default it is '', the empty string.

Use the optional --mappedToKeyColName arg to specify the name of the mapped
to column.  By default it is 'mapped_id'.

Use the optional --mappingTables arg to specify a set of datasets in which 
there is a mapping from the entities you are getting a report on to other, 
usually external, IDs.  Each dataset has a name and a database table that
holds the mapping.  The form of the arg's value is 'datasetname:tablename, ...'
The mapping table must have two columns.  One holds the entity value (and 
the column name is specified in the config file), and the other holds the 
mapped value (and the column name is specified in the config file).

If you provide --sql, then the temp table will be:
  - created
  - loaded with the results of your sql statement
  - dropped after the report is printed

Otherwise, the temp table will be used but not be created or dropped.


The --dbLogin and --dbPassword args provide a login that can access both 
the temp table (with create privileges if nec.) and the GUS tables the 
report will get data from.  By default these values are found in 
\$GUS_HOME/config/gus.config

The config module you provide with the --configModule arg is the full name 
of a perl module that configures the report maker.  It specifies which 
columns can go into a report and which queries to run to fill those 
columns.  With luck, you will be able to use a pre-existing config module.  
If there isn't one that meets your need, make a new one using a 
pre-existing one as a template.

The list of columns you want in your report is drawn from those columns 
that the config module makes available.  You might want all the available 
columns, or, you might want only some.  The --requestedColumns arg is a 
comma delimited list of column names, in the order that you would like 
them in your report.



Here is a sample call:

> gusreport --configModule GUS::ReportMaker::SampleGeneReportConfig --dbLogin mylogin --dbPassword mypasswd --tempTableName mylogin.tempResult --requestedColumns 'gene_symbol, synonyms' --sql 'select distinct gene_id, 9999 from DoTS.gene where gene.gene_symbol is not null union select distinct gene_id from DoTS.genesynonym' 

";

exit 1;
}
