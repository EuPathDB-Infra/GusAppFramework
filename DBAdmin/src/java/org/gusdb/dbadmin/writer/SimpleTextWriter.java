/*
 *  Created on Oct 28, 2004
 *
 */
package org.gusdb.dbadmin.writer;

import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;

import org.gusdb.dbadmin.model.Column;
import org.gusdb.dbadmin.model.HousekeepingColumn;
import org.gusdb.dbadmin.model.ColumnType;
import org.gusdb.dbadmin.model.Constraint;
import org.gusdb.dbadmin.model.ConstraintType;
import org.gusdb.dbadmin.model.Database;
import org.gusdb.dbadmin.model.Schema;
import org.gusdb.dbadmin.model.GusSchema;
import org.gusdb.dbadmin.model.Table;
import org.gusdb.dbadmin.model.Index;
import org.gusdb.dbadmin.model.GusTable;

/**
 *@author     msaffitz
 *@created    April 26, 2005
 *@version    $Revision$ $Date$
 */
public class SimpleTextWriter extends SchemaWriter {

	private Collection written  = new HashSet();


	protected void writeDatabase( Database db ) throws IOException {
		log.debug( "Writing database" );
		oStream.write( "-- Automatically generated by GusDBA.\n\n" );
		if ( db.getName() != null ) {
			oStream.write( "__" + db.getName() + "__\n\n" );
		}

		TreeSet schemas  = new TreeSet( db.getSchemas() );

		for ( Iterator i = schemas.iterator(); i.hasNext();  ) {
		Schema schema  = (Schema) i.next();

			if ( schema.getClass() == GusSchema.class ) {
				oStream.write( "__" + schema.getName() + "__\n\n" );
				writeTables( schema );
				oStream.flush();
			}
		}
		written = new HashSet();
	}


	private void writeTables( Schema schema ) throws IOException {
		TreeSet tables  = new TreeSet( schema.getTables() );

		for ( Iterator i = tables.iterator(); i.hasNext();  ) {
			GusTable table  = (GusTable) i.next();

			writeTable( table );
			oStream.flush();
		}
	}


	private void writeIndexes( GusTable table ) throws IOException {
		for ( Iterator i = table.getIndexs().iterator(); i.hasNext();  ) {
			writeIndex( (Index) i.next() );
		}
	}


	private void writeTable( GusTable table ) throws IOException {
		if ( written.contains( table ) ) {
			return;
		}
		if ( table.getSuperclass() != null &&
			! written.contains( table.getSuperclass() ) ) {
			writeTable( (GusTable) table.getSuperclass() );
		}

		oStream.write( table.getSchema().getName() + "." + table.getName() + " " );
		if ( table.getSuperclass() != null ) {
			oStream.write( " extends " +
				table.getSuperclass().getSchema().getName() +
				"." + table.getSuperclass().getName() );
		}
		oStream.write( "\n----------------------------------------------------\n" );
		writeColumns( table );
		oStream.write( "\n" );
		writeIndexes( table );
		oStream.write( "\n\n" );
		oStream.flush();
		written.add( table );

		if ( ! table.getSubclasses().isEmpty() ) {
			TreeSet subclasses  = new TreeSet( table.getSubclasses() );

			for ( Iterator i = subclasses.iterator(); i.hasNext();  ) {
				writeTable( (GusTable) i.next() );
			}
		}
	}


	private void writeIndex( Index index ) throws IOException {
		oStream.write( "Index: (" );
		for ( Iterator i = index.getColumns().iterator(); i.hasNext();  ) {
			Column col  = (Column) i.next();
			oStream.write( " " + col.getName() );
		}
		oStream.write( " )\n" );
	}


	private void writeColumns( Table table ) throws IOException {
		for ( Iterator i = table.getColumns( true ).iterator(); i.hasNext();  ) {
			Column column  = (Column) i.next();

			if ( column.getClass() != HousekeepingColumn.class ) {
				oStream.write( "\t" + column.getName() );
				writeSpace( column.getName() );
				writeType( column );
				if ( !column.isNullable() ) {
					oStream.write( "\tNOT NULL" );
				}
				oStream.write( "\n" );
			}
		}
		oStream.flush();
	}


	private void writeType( Column column ) throws IOException {
		if ( !column.getConstraints().isEmpty() ) {
			for ( Iterator i = column.getConstraints().iterator(); i.hasNext();  ) {
			Constraint cons  = (Constraint) i.next();

				if ( cons.getType() == ConstraintType.FOREIGN_KEY ) {
					writeRefType( cons );
				}
				if ( cons.getType() == ConstraintType.PRIMARY_KEY ) {
					writeTrueType( column );
				}
			}
		}
		else {
			writeTrueType( column );
		}
	}


	private void writeTrueType( Column column ) throws IOException {
		String type  = column.getType().toString();

		if ( column.getType() == ColumnType.STRING ||
			 column.getType() == ColumnType.CHARACTER ) {
			type = type + "(" + column.getLength() + ") ";
		}
		if ( column.getType() == ColumnType.NUMBER &&
			column.getLength() != 0 ) {
			type = type + "(" + column.getLength() + ","
				 + column.getPrecision() + ") ";
		}
		oStream.write( type );
		writeSpace( type );
	}


	private void writeRefType( Constraint cons ) throws IOException {
		oStream.write( cons.getReferencedTable().getSchema().getName()
			 + "." + cons.getReferencedTable().getName() );
		writeSpace( cons.getReferencedTable().getSchema().getName()
			 + "." + cons.getReferencedTable().getName() );

	}


	private void writeSpace( String word ) throws IOException {
		int l  = 40 - word.length();

		while ( l > 0 ) {
			oStream.write( " " );
			l--;
		}
	}


	/**
	 *@see    org.gusdb.dbadmin.writer.SchemaWriter#setUp()
	 */
	protected void setUp() {
	}


	/**
	 *@see    org.gusdb.dbadmin.writer.SchemaWriter#tearDown()
	 */
	protected void tearDown() { }
}

