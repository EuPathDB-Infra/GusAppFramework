#!@perl@

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::Manager;
use GUS::Pipeline::MakeTaskDirs;
use CBIL::Util::PropertySet;
use File::Basename;

use FileHandle;

$| = 1;
umask 002;



###########################  Properties  ##################################


my $propertiesFile = $ARGV[0];

&usage unless -e $propertiesFile;

# [name, default (or null if reqd), comment]
my @properties = 
(
 # properties required by Pipeline API
 ["liniacServer",         "",  "full name of liniac server"],
 ["stopBefore",   "none",  "the step to stop before.  uses the signal name"],

 # properties used by dotsbuild
 ["goBuildDir",         "",  "local GO Predict update dir"],
 ["dotsSeqDir",         "",  "where to find prodom.fsa file in dots build directory"],
 ["goPredictRelease",          "",  "eg 5 or 6"],
 ["completedSpeciesNickName", "",  "nick name of the other species (eg mus if this is a hum build) if that one completed first. use 'notdone' if it isn't done."],
 ["serverPath",           "",  "full path of dots update dir on liniac server"],
 ["nodePath",             "",  "full path of scratch dir on liniac node"],
 ["gusConfigFile",           "",  ""],	
 ["blastsimilarity.taskSize", "",  "number of seqs to process per blastsimilarity subtask"],
 ["blastsimilarity.Bparam", "", "paramter B for blastsimilarity"], 
 ["blastsimilarity.Vparam", "", "paramter V for blastsimilarity"],
 ["blastsimilarity.Eparam", "", "paramter E for blastsimilarity"],
 ["wuBlastBinPath",         "",  "path of wu blast bin dir (local)"],
 ["wuBlastBinPathLiniac",         "",  "path of wu blast bin dir on Liniac"],
 ["ncbiBlastBinPathLiniac",         "",  "path of ncbi blast bin dir on Liniac"],  
 ["buildDate" ,   "031401", "approximate start date of build"],
 ["externalDbDir", "", "directory for downloaded data from external databases"],
 ["currentWorm", "", "name of latest wormpep release"],
 
 #doIt properties--decide if want to organize these differently
 ["loadAssocIncrement", "", "load this many external associations at a time"],
 ["extractOrgProteinSeqs", "", "yes or no"],
 ["blastSeqs", "", "yes or no"],
 ["downloadGOTerms", "", "yes or no"],
 ["downloadGOAssoc", "", "yes or no"],
 ["downloadWorm", "", "yes or no"],
 ["downloadFly", "", "yes or no"],
 ["downloadArabidopsis", "", "yes or no"],
 ["downloadSwissprot", "", "yes or no"],
 ["downloadTREMBL", "", "yes or no"],
 ["downloadYeast", "", "yes or no"],
 ["downloadMGIInfo", "", "yes or no"],
 ["insertWorm", "", "yes or no"],
 ["insertFly", "", "yes or no"],
 ["insertArabidopsis", "", "yes or no"],
 ["insertSwissprot", "", "yes or no"],
 ["insertTREMBL", "", "yes or no"],
 ["insertYeast", "", "yes or no"],
 ["insertGOTerms", "", "yes or no"],
 ["insertFlyGoAssoc", "", "yes or no"],
 ["insertYeastGoAssoc", "", "yes or no"],
 ["insertWormGoAssoc", "", "yes or no"],
 ["insertArabidopsisGoAssoc", "", "yes or no"],
 ["insertSpTrGoAssoc", "", "yes or no"],
 ["insertMgiGoAssoc", "", "yes or no"],

#["downloadMouse", "", "yes or no"],
 #db releases
 ["fly_db_rls_id", "", "database release id for fly"],
 ["worm_db_rls_id", "", "database release id for worm"],
 ["tair_db_rls_id", "", "database release id for arabidopsis"],
 ["yeast_db_rls_id", "", "database relaease id for yeast"],
 ["sp_db_rls_id", "", "database release id for swissprot"],
 ["tr_db_rls_id", "", "database release id for trembl"],

 ["go_function_db", "", "database release id for GO Function branch"],
 ["go_process_db", "", "database release id for GO Process branch"],
 ["go_component_db", "", "database release id for GO Component branch"],
 ["ext_seq_table_id", "", "Table Id for DoTS.ExternalAASequence"], 
 ); 


###########################  Initialization  ##################################


my $propertySet  = CBIL::Util::PropertySet->new($propertiesFile, \@properties);

my $goBuildDir = $propertySet->getProp('goBuildDir');  #goBuildDir: /ptolemy/cbil/data/cbil/GO

my $buildName = &makeBuildName();  # releaseNUMBER (previously, passed in species nickname)

my $pipelineDir = "$goBuildDir/$buildName"; #ptolemy/cbil/data/cbil/GO/release#


###########################  DTB  ##################################


#DOTS directories:   
#dotsBuildDir = /ptolemy/cbil/data/cbil/DoTS/
#buildName = release#/speciesNickname
#pipelineDir = ptolemy/cbil/data/cbil/DoTS/release6/hum (or mouse)
#liniac server path: #/genomics/binf/scratch/Dotsbuilds

#Go directories:
#goBuildDir: /ptolemy/cbil/data/cbil/GOPredict
#(go) buildName: release#
#(go) pipelineDir: /ptolemy/cbil/data/cbil/GoPredict/release#/
#liniac server path: /genomics/binf/scratch/GOpredict/

#logs and signals for all
#in $pipelineDir/logs, $pipelineDir/signals 

#externalDbDir=/ptolemy/share/data/thirdparty

#SOME NOTES:
#dtb: make sure $doItProperty passed in are the same as the corresponding property
#eg "downloadGoTerms" is the signal representing the property of the same name
#download go stuff do is do it property  so far only for downloading external domains 
#but maybe I can use it for other things too
#go through and clean out unneeded properties, but make sure you have the ones you need!



###################  The Pipeline  ##########################

my $mgr = GUS::Pipeline::Manager->new($pipelineDir, $propertySet, $propertiesFile);
#note: creates signals, logs, skip, plugins dirs


#dtb: download all at once or download one at a time and insert right after?

&createGoPredictPipelineDir();

&downloadGOAssoc();

&downloadGOTerms();
#
&downloadFly();

&insertFly();

&downloadWorm();

&insertWorm();

&downloadYeast();

&insertYeast();

&downloadArabidopsis();

&insertArabidopsis();

&downloadSwissprot();

&insertSwissprot();

&downloadTREMBL();

&findTREMBLSubset();

&insertTREMBLSubset();

&insertGOTerms();

&downloadMGIInfo();

&insertFlyGoAssoc();

&insertWormGoAssoc();

&insertYeastGoAssoc();

&insertMgiGoAssoc();

&insertArabidopsisGoAssoc();

&insertSpTrGoAssoc();

&extractFlyWithAssociations();

&extractYeastWithAssociations();

&extractArabidopsisWithAssociations();

&extractWormWithAssociations();

&extractSwissprotWithAssociations();

&extractTremblWithAssociations();

#dtb: make sure subject-query names stay consistent, some issues surrounding this part

&copyPipelineDirToLiniac();

&blastGOSeqsAgainstMotifs();

#&copySimsFromLiniac();

##&correct PK's for CDD  dtb: do we need to run this?

#&insertAllExternalProteinSimilarities();

#&learnGORules();

#&applyGORules();   

#&versionOldProteinGOFunc();

# #&deleteProteinGoPredictions ? what is this

#&copyGOPredictions();

#&cleanGORules();

$mgr->goodbye("Pipeline complete!\n");

#########################   Pipeline Subroutines   ########################


sub createGoPredictPipelineDir {
        
    if (-e "$pipelineDir/seqfiles"){

	print "$pipelineDir already exists\n";
	return;
    }
    
    my $serverPath = $propertySet->getProp('serverPath');
    my $nodePath = $propertySet->getProp('nodePath');
    my $bsTaskSize = $propertySet->getProp('blastsimilarity.taskSize');
    my $wuBlastBinPathLiniac = $propertySet->getProp('wuBlastBinPathLiniac');
    my $ncbiBlastBinPathLiniac = $propertySet->getProp('ncbiBlastBinPathLiniac');
    my $bsBparam = $propertySet->getProp('blastsimilarity.Bparam');
    my $bsVparam = $propertySet->getProp('blastsimilarity.Vparam');
    my $bsEparam = $propertySet->getProp('blastsimilarity.Eparam');
    
    $mgr->runCmd("mkdir -p $pipelineDir/seqfiles");
    #add more as they come
 
    #dtb: keep sp and trembl? make sure names stay consistent
    my @subjectNames = ("fly", "worm", "yeast", "arabidopsis", "swissprot", "trembl"); 
    
    foreach my $subjectName (@subjectNames){
	
	&makeSimilarityDir($subjectName, "prodom", $buildName, $goBuildDir, 
			   $serverPath, $nodePath, $bsTaskSize, 
			   $wuBlastBinPathLiniac,
			   "prodom.fsa", '(\d+)', 'blastp', 
			   '-wordmask=seg+xnu', 'W=3', 'T=1000','B=$bsBparam','V=$bsVparam','E=$bsEparam'); 
        #produces:
        #controller.prop
           #masterdir=$serverpath/$buildName/similarity/$queryName-prodom/master
	   #inputdir=$serverpath/$buildName/similarity/$queryName-prodom/input
	   #nodedir=$nodePath
	   #slotspernode=1   (default)
           #subtasksize=$bsTaskSize
	   #taskclass=DJb::DistribJobTasks::BlastSimilarityTask (default)
           #nodeclass=DJob::DistribJob::BprocNode (default)
           #restart=no (default

        #task.prop:
           #blastBinDir=$blastBinPath  (wuBlast -- needs changing?) NO
           #dbFilePath=$serverpath/$buildName/seqfiles/prodom.fsa #needs changing--DONE
           #inputFilePath=$serverpath/$buildName/seqfiles/finalDots.fsa (default--must be changed!) DONE in sims, not in method
           #dbType=p (default)
           #regex=(\d+)  --needs to be changed
           #blastProgram=blastp
           #blastParamsFile=blastParams (default)

        #blastParams: 
           #-wordmask=seg+xnu W=3 T=1000 B=$bsBparam','V=$bsVparam' need to set these! and make sure they work


	&makeSimilarityDir($subjectName, "cdd", $buildName, $goBuildDir, 
			   $serverPath, $nodePath, $bsTaskSize, 
			   $ncbiBlastBinPathLiniac,
			   "cdd/All", '(\d+)', 'blastp', 
			   '-wordmask=seg+xnu', 'W=3', 'T=1000','B=$bsBparam','V=$bsVparam','E=$bsEparam');  
	    #produces:
        #controller.prop
           #masterdir=$serverpath/$buildName/similarity/$queryName-cdd/master
	   #inputdir=$serverpath/$buildName/similarity/$queryName-cdd/input
	   #nodedir=$nodePath
	   #slotspernode=1   (default)
           #subtasksize=$bsTaskSize
	   #taskclass=DJb::DistribJobTasks::BlastSimilarityTask (default)
           #nodeclass=DJob::DistribJob::BprocNode (default)
           #restart=no (default)

        #task.prop:
           #blastBinDir=$blastBinPath (ncbiBlast) needs changing? NO
           #dbFilePath=$serverpath/$buildName/seqfiles/cdd.fsa  NEEDS CHANGING--DONE
           #inputFilePath=$serverpath/$buildName/seqfiles/finalDots.fsa (default--must be changed!)
           #dbType=p (default)
           #regex=(\d+)  --needs to be changed
           #blastProgram=rpsblast
           #blastParamsFile=blastParams (default)

        #blastParams: 
           #-a 2 -e .1 -p T need to set these! and make sure they work, and make sure no '=' needed

    }

    $mgr->runCmd("chmod -R g+w $goBuildDir/$buildName");
}


sub downloadGOAssoc{
      
    my $signal = "downloadGOAssoc";
    
    return if $mgr->startStep("Downloading GO Associations", $signal, 'downloadGOAssoc');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadGoAssoc.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/goassoc/$date";
  
    $mgr->runCmd("mkdir -p $downloadSubDir");

    my $ftpsite = "ftp://ftp.geneontology.org/pub/go/gene-associations/";

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -A \"gene_association.fb, gene_association.mgi, gene_association.tair, gene_association.wb, gene_association.sgd, gene_association.goa_sptr.gz\" -P $downloadSubDir $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/gene_association.goa_sptr.gz");

    $mgr->endStep($signal);

    # individual species from Go
    # maybe go to ebi or go to find file of combined trembl and swissprot
    # mapping from mgi to swissprot (ask sharon)
}

sub downloadMGIInfo {

    my $signal = "downloadMGIInfo";

    return if $mgr->startStep("Downloading MGI Info", $signal,'downloadMGIInfo');

    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadMGIInfo.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/mgi/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");

    my $ftpsite = "ftp://ftp.informatics.jax.org/pub/reports/MRK_SwissProt.rpt";
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=2 -P $downloadSubDir $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->endStep($signal);
} 

sub downloadArabidopsis {
    my $signal = "downloadArabidopsis";
    
    return if $mgr->startStep("Downloading Arabidopsis", $signal, 'downloadArabidopsis');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadArabidopsis.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/arabidopsis/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://tairpub:tairpub\@ftp.arabidopsis.org/home/tair/Sequences/blast_datasets/ATH1_pep_20020731.Z"; 
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir  $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("uncompress $downloadSubDir/ATH1_pep_20020731.Z");
    $mgr->endStep($signal);
}

sub insertArabidopsis {

    my $date = $propertySet->getProp('buildDate');

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $tairSeqFile = "$externalDbDir/arabidopsis/$date/ATH1_pep_20020731";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertArabidopsis.log";

    my $tairDB = $propertySet->getProp('tair_db_rls_id');
    
    #tair fasta convention: source_id name /   description

    #>At3g47930.1 L-galactono-1,4-lactone dehydrogenase - like protein   /  L-galactono-1,4-lactone dehydrogenase, Brassica oleracea, Z97060; supported by cDNA: gi_7707280_dbj_AB042279.1_AB042279 
    my $regex_src_id = "^\\>(\\S+)\\s";  
    my $regex_name = "^\\>\\S+\\s(.*)\\s\\s\\s\\/" ;
    my $regex_desc = "^\\>.*\\s\\s\\s\\/\\s+(.*)";

   my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $tairSeqFile --external_database_release_id $tairDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_desc \"$regex_desc\" --writeFile tairSeqsFile  --log_frequency 500";
    
    $mgr->runPluginNoCommit("insertArabidopsis", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Arabidopsis", 'insertArabidopsis');

}

sub downloadFly{
    
    my $signal = "downloadFly";
    
    return if $mgr->startStep("Downloading Fly", $signal, 'downloadFly');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadFly.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/fly/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.fruitfly.org/pub/genomic/fasta/aa_gadfly.dros.RELEASE2.Z";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("uncompress $downloadSubDir/aa_gadfly.dros.RELEASE2.Z");

    $mgr->endStep($signal);

}

sub insertFly {

    #note: don't need to call startStep in insert methods as runPlugin does that
    #for you

    my $date = $propertySet->getProp('buildDate');
    #change to flyrelease maybe?

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $flySeqFile = "$externalDbDir/fly/$date/aa_gadfly.dros.RELEASE2";
    #add as property?


    my $logFile = "$pipelineDir/logs/insertFly.log";

    my $flyDB = $propertySet->getProp('fly_db_rls_id');
    #fly fasta convention: name|source_id|??|secondary identifier--annotation GO functions location

#  >rho|FBgn0004635|pp-CT1008|FBan0001004 GO:[integral plasma membrane protein (GO:0005887); plasma membrane (GO:0005886); signal transduction (GO:0004871)] mol_weight=39330  located on: 3L 62A3-62A3; 
    
    my $regex_src_id = "^\\>\\w+\\|(FBgn\\w+)\\|\\S+\\s";  
    my $regex_name = "^\\>(\\w+)|FBgn\\S+\\s";
    my $regex_desc = "^\\>.*\\s(located.*)";
    my $regex_secondary_id = "^\\>\\S+\\|(FBan\\w+)\\S*\\s";

    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $flySeqFile --external_database_release_id $flyDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_secondary_id \"$regex_secondary_id\" --regex_desc \"$regex_desc\" --writeFile flySeqsFile  --log_frequency 500 ";
    
    $mgr->runPluginNoCommit("insertFly", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Fly", 'insertFly');
    
    
}

sub downloadSwissprot {
    
    my $signal = "downloadSwissprot";
    
    return if $mgr->startStep("Downloading Swissprot", $signal, 'downloadSwissprot');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadSwissprot.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/swissprot/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.ebi.ac.uk/pub/databases/sp_tr_nrdb/fasta/sprot.fas.gz";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/sprot.fas.gz");

    $mgr->endStep($signal);


}

sub insertSwissprot {

    my $date = $propertySet->getProp('buildDate');

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $spSeqFile = "$externalDbDir/swissprot/$date/sprot.fas";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertSwissprot.log";

    my $spDB = $propertySet->getProp('sp_db_rls_id');
    #6PGD_HAEIN (P43774) 6-phosphogluconate dehydrogenase, decar
    #fasta convention: name (source_id) description    

    my $regex_name = "^\\>(\\S+)\\s";
    my $regex_src_id = "^\\>\\S+\\s\\((\\w+)\\)\\s";  
    my $regex_desc = "^\\>\\S+\\s\\(\\w+\\)\\s(.*)";
    
    my $args = "--table_name DoTS::ExternalAASequence --sequencefile $spSeqFile --external_database_release_id $spDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_desc \"$regex_desc\" --writeFile spSeqsFile  --log_frequency 100000";
    
    $mgr->runPlugin("insertSwissprot", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Swissprot", 'insertSwissprot');

}

sub downloadTREMBL {

    my $signal = "downloadTREMBL";
    
    return if $mgr->startStep("Downloading TREMBL", $signal, 'downloadTREMBL');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';
    
    my $logfile = "$pipelineDir/logs/downloadTREMBL.log";
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/trembl/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.ebi.ac.uk/pub/databases/sp_tr_nrdb/fasta/trembl.fas.gz";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/trembl.fas.gz");

    $mgr->endStep($signal);

}

sub findTREMBLSubset {

    my $signal = "findTREMBLSubset";
    
    return if $mgr->startStep("findTREMBLSubset", $signal, 'insertTREMBL');

    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $date = $propertySet->getProp('buildDate');

    my $downloadTremblSubDir = "$externalDbDir/trembl/$date";
    my $downloadAssocSubDir = "$externalDbDir/goassoc/$date";
    

    my $assocData = &createTREMBLAssocHash($downloadAssocSubDir);
    &writeTREMBLSubset($downloadTremblSubDir, $assocData);
    
    $mgr->endStep($signal);


}

sub createTREMBLAssocHash{
#change to data directory
    my ($downloadSubDir) = @_;
    my $assocData;

    my $fh = FileHandle->new("<$downloadSubDir/gene_association.goa_sptr");

    if (!($fh)){
#	die "Cannot find gene_association.goa_sptr for swissprot/trembl!";
    }

    while (<$fh>){
	chomp;
	my @columns = split(/\t/, $_);
	$assocData -> {$columns[1]} = 1;
    }
    return $assocData;
}

sub writeTREMBLSubset{
    my ($downloadSubDir, $assocData) = @_;
    open (OUTPUT, ">>$downloadSubDir/tremblSubsets.fas");


    my $fh = FileHandle->new("<$downloadSubDir/trembl.fas");
    my $subsetSeq = 0;
    while (<$fh>){
	#chomp;
	if (/^\>/) {  #defline
	    my $line = $_;
	    my ($idOne) = $line =~ /(\w+)\s/;
	    if ($assocData->{$idOne}){
		print OUTPUT "$line";
		$subsetSeq = 1;
	    }
	    else {
		$subsetSeq = 0;
	    }
	}
	else { #sequence
	    my $line = $_;
	    if ($subsetSeq == 1){
		print OUTPUT $line;
	    }
	}
    }
}

sub insertTREMBLSubset {
 
    my $date = $propertySet->getProp('buildDate');
    #change to flyrelease maybe?
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $trSeqFile = "$externalDbDir/trembl/$date/tremblSubsets.fas";
    #add as property?
    
    my $logFile = "$pipelineDir/logs/insertTrembl.log";
    
    my $trDB = $propertySet->getProp('tr_db_rls_id');
    
    #fasta convention: name (source_id) description    
    
    my $regex_name = "^\\>(\\S+)\\s";
    my $regex_src_id = "^\\>\\S+\\s\\((\\w+)\\)\\s";  
    my $regex_desc = "^\\>\\w+\\s\\(\\w+\\)\\s(.*)";
    
    my $args = "--table_name DoTS::ExternalAASequence --sequencefile $trSeqFile --external_database_release_id $trDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_desc \"$regex_desc\" --writeFile trSeqsFile  --log_frequency 100000 ";
    
    $mgr->runPlugin("insertTrembl", 
			    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
			    "Inserting Trembl", 'insertTREMBL');
    
    
}

sub downloadWorm {
    
    my $signal = "downloadWorm";
    
    return if $mgr->startStep("Downloading Worm", $signal, 'downloadWorm');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadWorm.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/worm/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
 
    my $currentWormRealFile = $propertySet->getProp('currentWorm');
   
    my $currentWormTarFile = "$currentWormRealFile" . ".tar";
 
    my $fullWormDirectory = "$downloadSubDir/wormsrv2/WORMPEP/$currentWormRealFile";

    my $ftpsite = "ftp://ftp.wormbase.org/pub/wormbase/$currentWormTarFile" . ".gz";
        #"current" link does not work according to Sharon

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=2 -P $downloadSubDir  $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/$currentWormTarFile" . ".gz");
	
    $mgr->runCmd("tar -xf $downloadSubDir/$currentWormTarFile --directory=$downloadSubDir");

    #tar creates some extra directories; move the file we want to the usual spot
    $mgr->runCmd("mv $fullWormDirectory/$currentWormRealFile $downloadSubDir");

    $mgr->endStep($signal);
}

sub insertWorm {
    my $date = $propertySet->getProp('buildDate');
    

    my $externalDbDir = $propertySet->getProp('externalDbDir');
    my $wormSeqFile = $propertySet->getProp('currentWorm');
    my $fullWormSeqFile = "$externalDbDir/worm/$date/$wormSeqFile";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertWorm.log";

    my $wormDB = $propertySet->getProp('worm_db_rls_id');
    #worm fasta convention: source_id secondary_id--accession number description

#    >2L52.1 CE32090   Zinc finger, C2H2 type status:Predicted TN:CAA21776 protein_id:CAA21776.2
    my $regex_src_id = "^\\>(\\S+)\\s";  
    my $regex_secondary_id = "^\\>\\S+\\s(CE\\w+)\\s";
    my $regex_desc = "^\\>\\S+\\s+CE\\w+\\s+(.*)";
    
    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $fullWormSeqFile --external_database_release_id $wormDB --regex_source_id \"$regex_src_id\"  --regex_secondary_id \"$regex_secondary_id\" --regex_desc \"$regex_desc\" --writeFile wormSeqsFile  --log_frequency 500 ";
    
    $mgr->runPluginNoCommit("insertWorm", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Worm", 'insertWorm');

}

sub downloadYeast {
    my $signal = "downloadYeast";
    
    return if $mgr->startStep("Downloading Yeast", $signal, 'downloadYeast');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadYeast.log";
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/yeast/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://genome-ftp.stanford.edu/pub/yeast/data_download/sequence/genomic_sequence/orf_protein/orf_trans.fasta.gz";
 
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=6 -P $downloadSubDir  $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/orf_trans.fasta.gz");

    $mgr->endStep($signal);
}

sub insertYeast {
    
    my $date = $propertySet->getProp('buildDate');
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $yeastSeqFile = "$externalDbDir/yeast/$date/orf_trans.fasta";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertYeast.log";
    
    my $yeastDB = $propertySet->getProp('yeast_db_rls_id');
    #yeast fasta convention: ORFP:source_id name SGDID:secondary_id--SGD ID, description
    #>ORFP:YAL001C TFC3 SGDID:S0000001, Chr I from 147595-147664,147755-151167, reverse complement
    
    my $regex_src_id = "^\\>ORFP\\:(\\S+)\\s";  
    my $regex_name = "^\\>\\S+\\s+(\\S+)\\s";
    my $regex_secondary_id = "^\\>.*\\sSGDID:(\\S+)\\,\\s";
    my $regex_desc = "^\\>.*\\sSGDID\\:\\S+\\,\\s(.+)";
    

    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $yeastSeqFile --external_database_release_id $yeastDB --regex_source_id \"$regex_src_id\" --regex_name \"$regex_name\"  --regex_secondary_id \"$regex_secondary_id\" --regex_desc \"$regex_desc\" --writeFile yeastSeqsFile  --log_frequency 500";
    
    $mgr->runPluginNoCommit("insertYeast", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Yeast", 'insertYeast');

}

sub downloadGOTerms {

    my $signal = "downloadGOTerms";
    
    return if $mgr->startStep("Downloading GO Terms", $signal, 'downloadGOTerms');

    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadGOTerms.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/goterms/$date";

    $mgr->runCmd("mkdir -p $downloadSubDir");
 
    my $ftpsite = "ftp://ftp.geneontology.org/pub/go/ontology/";

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -A \"function.ontology, component.ontology, process.ontology\" -P $downloadSubDir  $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->endStep($signal);
    # function.ontology

}

sub insertGOTerms{

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $functionRelease = $propertySet->getProp('go_function_db');
    my $componentRelease = $propertySet->getProp('go_component_db');
    my $processRelease = $propertySet->getProp('go_process_db');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/goterms/$date";
    
    my $args = "--id_file goIdFile --file_path $downloadSubDir --verbose --create_release";
 #   $args .= "--function_ext_db_rel $functionRelease --component_ext_db_rel $componentRelease ";
 #   $args .= "--process_ext_db_rel $processRelease";
    $mgr->runPlugin("insertGOTerms", "GUS::GOPredict::Plugin::LoadGoOntology",
			    $args, "Loading GO Ontology", 'insertGOTerms');

    # LoadGoOntology.pm
}

sub insertFlyGoAssoc{
    
    my $flyDb = $propertySet->getProp('fly_db_rls_id');
    my $idFile = "$pipelineDir/logs/flyAssocIds";
    my $flatFile = "gene_association.fb";
    my $orgArgs = "--flat_file $flatFile --id_file $idFile --fb_db_rls_id $flyDb";
    my $doIt = "insertFlyGoAssoc";

    &_insertGoAssoc($orgArgs, $doIt);
}   

sub insertWormGoAssoc{
    
    my $wormDb = $propertySet->getProp('worm_db_rls_id');
    my $idFile = "$pipelineDir/logs/wormAssocIds";
    my $flatFile = "gene_association.wb";
    my $orgArgs = "--flat_file $flatFile --id_file $idFile --worm_db_rls_id $wormDb";
    my $doIt = "insertWormGoAssoc";

    &_insertGoAssoc($orgArgs, $doIt);

}   

sub insertYeastGoAssoc{
    
    my $yeastDb = $propertySet->getProp('yeast_db_rls_id');
    my $idFile = "$pipelineDir/logs/yeastAssocIds";
    my $flatFile = "gene_association.sgd";
    my $orgArgs = "--flat_file $flatFile --id_file $idFile --yeast_db_rls_id $yeastDb";
    my $doIt = "insertYeastGoAssoc";

    &_insertGoAssoc($orgArgs, $doIt);

}   

sub insertArabidopsisGoAssoc{
    
    my $tairDb = $propertySet->getProp('tair_db_rls_id');
    my $idFile = "$pipelineDir/logs/tairAssocIds";
    my $flatFile = "gene_association.tair";
    #my $increment = $propertySet->getProp('loadAssocIncrement');
    my $orgArgs = "--start_line 1 --end_line 65000 --flat_file $flatFile --id_file $idFile --tair_db_rls_id $tairDb";
    my $doIt = "insertArabidopsisGoAssoc";


    
    &_insertGoAssoc($orgArgs, $doIt);

}   

sub insertMgiGoAssoc{
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    my $date = $propertySet->getProp('buildDate');
    my $mgiDir = "$externalDbDir/mgi/$date";

    my $increment = $propertySet->getProp('loadAssocIncrement');
    my $spDb = $propertySet->getProp('sp_db_rls_id');
    my $trDb = $propertySet->getProp('tr_db_rls_id');
    my $idFile = "$pipelineDir/logs/mgiAssocIds";
    my $flatFile = "gene_association.mgi";
    my $orgArgs = "--increment $increment --start_line 1 --end_line 65000 --flat_file $flatFile --id_file $idFile --sp_db_rls_id $spDb --tr_db_rls_id $trDb ";
    $orgArgs .= "--mgi_file_path $mgiDir";
    my $doIt = "insertMgiGoAssoc";
    
    &_insertGoAssoc($orgArgs, $doIt);
    
}   

sub insertSpTrGoAssoc{
    my $spDb = $propertySet->getProp('sp_db_rls_id');
    my $trDb = $propertySet->getProp('tr_db_rls_id');
    my $increment = $propertySet->getProp('loadAssocIncrement');

    my $idFile = "$pipelineDir/logs/spTrAssocIds";
    my $flatFile = "gene_association.goa_sptr";
    my $orgArgs = "--increment $increment --start_line 1 --end_line 2741000 --flat_file $flatFile --id_file $idFile --sp_db_rls_id $spDb --tr_db_rls_id $trDb";
    my $doIt = "insertSpTrGoAssoc";

    &_insertGoAssoc($orgArgs, $doIt);
    
}   

sub _insertGoAssoc{

    my ($args, $doIt) = @_;

    my $goDB =  $propertySet->getProp('go_function_db');
    my $signal = $doIt;

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $goAssocFileDir = "$externalDbDir/goassoc/$date";

    my $args = "$args --loadAgain --go_ext_db_rel_id $goDB --file_path $goAssocFileDir";

    $mgr->runPlugin($signal, "GUS::GOPredict::Plugin::LoadGoAssoc",
			    $args, "Loading GO Associations", $doIt);


}


sub extractArabidopsisWithAssociations {
    my $dbId = $propertySet->getProp('tair_db_rls_id');
   
    &_extractOrgProteinSeqs ("arabidopsis", $dbId);

}

sub extractFlyWithAssociations{
    #however I decide to do all this db release id stuff
    #should only extract seqs that have associations
    my $dbId = $propertySet->getProp('fly_db_rls_id');
   
    &_extractOrgProteinSeqs ("fly", $dbId);

}

sub extractYeastWithAssociations{
    my $dbId = $propertySet->getProp('yeast_db_rls_id');
   
    &_extractOrgProteinSeqs ("yeast", $dbId);

}

sub extractWormWithAssociations{
    my $dbId = $propertySet->getProp('worm_db_rls_id');
   
    &_extractOrgProteinSeqs ("worm", $dbId);

}

sub extractMouseWithAssociations{


}

sub extractSwissprotWithAssociations{
    my $dbId = $propertySet->getProp('sp_db_rls_id');
   
    &_extractOrgProteinSeqs ("swissprot", $dbId);

}

sub extractTremblWithAssociations{
    my $dbId = $propertySet->getProp('tr_db_rls_id');
   
    &_extractOrgProteinSeqs ("trembl", $dbId);

}


#for now the same as extractProteinSeqs in dots build
sub _extractOrgProteinSeqs {
    my ($name, $dbId) = @_;

    my $signal = "${name}Extract";

    return if $mgr->startStep("Extracting $name external protein sequences from GUS", $signal, 'extractOrgProteinSeqs');
    my $goDb = $propertySet->getProp('go_function_db');
    my $extSeqTableId =  $propertySet->getProp('ext_seq_table_id');

    my $sql = "select eas.aa_sequence_id, eas.name, eas.source_id, eas.secondary_identifier, eas.description, eas.sequence from DoTS.ExternalAASequence eas, DoTS.GOAssociation ga, DoTS.GOAssociationInstance gai where ga.table_id = $extSeqTableId and ga.row_id = eas.aa_sequence_id and eas.external_database_release_id = $dbId and gai.go_association_id = ga.go_association_id and gai.external_database_release_id = $goDb";

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $seqFile = "$pipelineDir/seqfiles/$name.fsa";
    my $logFile = "$pipelineDir/logs/${name}Extract.log";

    #gusConfigFile: .gus.properties
    #outputFile: fasta file
    #MAKE SURE DUMP DISTINCT SEQS
    #dtb: need to include min length?
    my $cmd = "dumpDistinctSequencesFromTable.pl --gusConfigFile $gusConfigFile  --outputFile $seqFile --idSQL \"$sql\"  2>> $logFile";

    $mgr->runCmd($cmd);

    $mgr->endStep($signal);
}


#3 ways to do this:
#1. re-extract domains new
#2. copy from dots pipelineDir to go pipelineDir
#3. ignore and use the ones already on liniac cluster

#only necessary to copy prodom because cdd is in third party directory

#right now doing #2
sub copyProdomToGoDirectory{

    my $signal = "copyDomains";

    return if $mgr->startStep("Copying extracted domain sequences from DoTS pipeline Directory",
			      $signal, 'blastSeqs');

    my $dotsSeqDir = $propertySet->getProp('dotsSeqDir');
    my $seqDir = "$pipelineDir/seqfiles/";

    #not sure if these two, or also CDD, or not nrdb

    my $copyProdomCmd = "cp $dotsSeqDir/prodom.fsa $seqDir";

    $mgr->runCmd($copyProdomCmd);
 
    $mgr->endStep($signal);
   
}

sub copyProteinDBsToLiniac {

    my ($name) = @_;

    my $serverPath = $propertySet->getProp('serverPath');
    my $liniacServer = $propertySet->getProp('liniacServer');

    my $externalDbDir = $propertySet->getProp('externalDbDir');
    my $date = $propertySet->getProp('buildDate');
 
    my $cddDir = "$externalDbDir/cdd/$date";

    my $signal = "proteinDBs2Liniac";
    return if $mgr->startStep("Copying CDD and Prodom to $serverPath/$buildName/seqfiles on $liniacServer", $signal);

    my $seqfilesDir = "$pipelineDir/seqfiles";
    
    $mgr->copyToLiniac("$cddDir", "cdd", $liniacServer, 
		       "$serverPath/$buildName/seqfiles");

    my $f = "prodom.fsa";
    $mgr->copyToLiniac($seqfilesDir, $f, $liniacServer, 
		       "$serverPath/$buildName/seqfiles");

    $mgr->endStep($signal);
}

#taken from dotsbuild method of the same name
#note: no species nickname

#copy directory $buildName to liniac server directory 
#/genomics/binf/scratch/goPredicts/

#make sure these directories are correct!

#DTB: Make sure nodepath is correct, which is /scratch/user/dbarkan -- make
#sure my permissions are ok
sub copyPipelineDirToLiniac {


    my $serverPath = $propertySet->getProp('serverPath');
    my $liniacServer = $propertySet->getProp('liniacServer');
    my $fromDir = $goBuildDir;
    my $fromFile = $buildName;
    
    my $signal = "dir2liniac";
    return if $mgr->startStep("Copying $goBuildDir/$buildName to $serverPath on $liniacServer", $signal);

    $mgr->copyToLiniac($fromDir, $fromFile, $liniacServer, $serverPath);

    $mgr->endStep($signal);

}



sub blastGOSeqsAgainstMotifs{
    my ($name) = @_;
    
    my $serverPath = $propertySet->getProp('serverPath');
    
    my $signal = "findGoSimilarities";
    return if $mgr->startStep("Starting similarities between domains and external sequences on liniac", $signal);
    
    $mgr->endStep($signal);

    # $serverPath/$buildName: cmd looks for /seqFiles and /similarities in these
    # no idea what # of nodes and liniac log message should be

    my $liniacCmdMsg = "submitPipelineJob runGoSimilarities $serverPath/$buildName NUMBER_OF_NODES";
    my $liniacLogMsg = "monitor $serverPath/$buildName/logs/*.log and xxxxx.xxxx.stdout";

    $mgr->exitToLiniac($liniacCmdMsg, $liniacLogMsg, 1);
}

#issue: TaskRunAndValidate stores everything based on subject name (at least in the script)
#but in the actual /ptolemy directory everything is stored based on the subject-query name
#subject-query is much easier and probably the real way to do it (although I should ask).
#in that case the @names list should be every subject-query combination.

sub copySimsFromLiniac{

    my $serverPath = $propertySet->getProp('serverPath');
    my $liniacServer = $propertySet->getProp('liniacServer');

    my $signal = "copySimsFromLiniac";
    return if $mgr->startStep("Copying external protein similarities from $liniacServer", 
			 $signal);
    my @names = ("prodom", "cdd"); #maybe just two
    foreach my $name (@names) {
	$mgr->copyFromLiniac($liniacServer, 
			     "$serverPath/$buildName/similarity/$name/master/mainresult", 
			     "blastSimilarity.out", 
			     "$pipelineDir/similarity/$name");
    }
    $mgr->endStep($signal);
}


sub insertAllExternalProteinSimilarities {

    my @domainNames = ("prodom", "cdd");
    
    my @subjectNames = ("fly", "worm", "yeast", "arabidopsis", "mouse", "swissprot", "trembl"); 


    foreach my $domain (@domainNames){
	foreach my $subjectName (@subjectNames) {
	    
	    my $fullName = "$subjectName-$domain";
	    &insertExternalProteinSimilarities ($fullName, "DoTS.ExternalAASequence");
	    #dtb: check if need owner in parameter
	}
    }
}

sub insertExternalProteinSimilarities {
    my ($name, $subjectTable) = @_;

    my $file = "$pipelineDir/similarity/$name/blastSimilarity.out";
    $file .= ".correctPK" if ($name eq "cdd");

    my $restart = $propertySet->getProp('iPSRestart');

    my $args = "--files $file --verbose --restart $restart --query_table ExternalAASequence --subject_table $subjectTable --log_frequency 10 --limit_sub 50 --limit_hsp 10";

    $mgr->runPlugin("loadSims_$name", 
		    "GUS::Common::Plugin::LoadBlastSimilaritiesPK", $args,
		    "Loading $name similarities");
}




sub learnGORules{

}

sub applyGORules{
    my $makeNewGORules = $propertySet->getProp('makeNewGORules');
    my $GOversion = $propertySet->getProp('GOversion');
    my $species = $propertySet->getProp('speciesNickname');
    my $prodom_db_id = $propertySet->getProp('prodom_db_id');
    my $load_db_id = $propertySet->getProp('load_db_id');
    my $pfam_db_id = $propertySet->getProp('pfam_db_id');
    my $smart_db_id = $propertySet->getProp('smart_db_id');
    
    my $sql = " rs.row_alg_invocation_id >= 111286 and ( rs.confidence in ('high','medium') OR (rs.confidence = 'low' AND rs.reviewer_id is NULL))";

    my $xdb = "$prodom_db_id,$load_db_id,$pfam_db_id,$smart_db_id";
    my $likeGOVer = "\%$GOversion\%";
    my $sqlFilter = "sim.pvalue_exp <= -5";
    my $ignore_existing = $makeNewGORules eq 'yes'? 0 : 1; 

    my $args = " --verbose --mode add  --rule-sql-filter \"$sql\" --guide ${species}dots --qs-type na --go-ver \"$likeGOVer\" --pv-ratio .80 --pv-threshold 1e-30 --ss-xdb $xdb --ignore-expred $ignore_existing  --sql-filter \"$sqlFilter\"";

    $mgr->runPlugin("applyGORules", "GUS::GOPredict::Plugin::MakeGoPredictions", $args, 
		    "Applying GO Rules"); 

}

sub deleteProteinGOPredictions {

    my $makeNewGORules = $propertySet->getProp('makeNewGORules');

    return if $makeNewGORules eq "yes";  # hack for now 

    my $GOversion = $propertySet->getProp('GOversion');
    my $taxonId = $propertySet->getProp('taxonId');
    
    my $sql = "SELECT pgf.protein_go_function_id FROM RNA r, Protein p, ProteinGoFunction pgf, GOFunction gf,  Assembly ass, RNASequence rs, NAFeature naf  WHERE ass.taxon_id = $taxonId and ass.na_sequence_id = naf.na_sequence_id and naf.na_feature_id = rs.na_feature_id and r.rna_id = rs.rna_id and p.rna_id = r.rna_id and  pgf.protein_id = p.protein_id and pgf.manually_reviewed = 0 and pgf.go_function_id = gf.go_function_id and gf.go_cvs_version  = '$GOversion'";

    my $args = "--idSQL \"$sql\" --table_name 'ProteinGOFunction' --primary_key 'protein_go_function_id'";

    $mgr->runPlugin("deleteProteinGOPredictions", "GUS::GOPredict::Plugin::DeleteGoPredictions", 
	
	    $args, "Deleting Protein GO predictions"); 

}

sub copyGOPredictions {

    my $GOversion = $propertySet->getProp('GOversion');
    my $taxonId = $propertySet->getProp('taxonId');
    my $GOrootId = $propertySet->getProp('GOrootId');

    my $alg_inv_id = 125852;  # must be obtained for current run of MakeGoPredictions - see applyGORules sub

    # HACK: must hard code the alg_inv_id (this sub is going away next build)

    # remove the following line when you have set $alg_inv_id for hum
    #$mgr->error("MUST SET alg_inv_id in copyGOPredictions()") if ($taxonId != 14);
    
    my $idSQL = "select aa_sequence_go_function_id from aasequencegofunction where row_alg_invocation_id = $alg_inv_id and go_function_id != $GOrootId";

    my $idExclSQL = "select distinct pgf.protein_id from RNA r, Protein p, ProteinGoFunction pgf, GOFunction gf, Assembly ass, RNASequence rs, NAFeature naf where ass.taxon_id = $taxonId and ass.na_sequence_id = naf.na_sequence_id and naf.na_feature_id = rs .na_feature_id and r.rna_id = rs.rna_id and p.rna_id = r.rna_id and pgf.protein_id = p.protein_id and pgf.manually_reviewed = 1 and pgf.go_function_id = gf.go_function_id and gf.go_cvs_version  = '$GOversion'";

    my $args = "--idSQL \"$idSQL\" --idExclSQL \"$idExclSQL\" --verbose";

    $mgr->runPlugin("copyGOPredictions", "GUS::GOPredict::Plugin::CopyAASeqGoFuncToProtGoFunc", $args, 
		    "Copying GO predictions from AA to Protein"); 
}


sub cleanGORules{
    my $taxonId = $propertySet->getProp('taxonId');
}




sub makeBuildName {
  
  return "release" . $propertySet->getProp('goPredictRelease');
}

sub usage {
    print STDERR "usage:  gobuild propertiesfile\n";
    exit 1;
}



#########################   not sure if i need these  ########################


sub deleteMGIToDots {
    
    my $signal = "deleteMGIToDots";

    return if $mgr->startStep("Deleting MGI to DoTS entries from DbRefNASequence", $signal,'loadMGI');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $mgiDbRlsId = $propertySet->getProp('mgi_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $mgiDbRlsId";

    my $cmd = "deleteEntries.pl --table DoTS.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadMGIToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_MGI' --pattern '\d+' --db_id 4893";

    $mgr->runPlugin("loadMGIMapping", "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", $args, "loading MGI to DoTS mapping",'loadMGI');
}

sub loadMGIInfo {

    my $args = "--inputfile /usr/local/db/local/mgi/MRK_List2.sql.rpt";

    $mgr->runPlugin("loadMGIInfo", "DoTS::DotsBuild::Plugin::LoadMGIInfo", $args, "Loading MGI Info",'loadMGI' );
    
}

sub deleteGeneCardsToDots {

    my $signal = "deleteGeneCardsToDots";

    return if $mgr->startStep("Deleting GeneCards to DoTS entries from DbRefNASequence", $signal,'loadGeneCards');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $geneCardsDbRlsId = $propertySet->getProp('genecards_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $geneCardsDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}
    
sub loadGeneCardsToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_GeneCards' --pattern '\S+' --db_id 4892";

    $mgr->runPlugin("loadGeneCardsMapping", 
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence",
		    $args,
		    "loading GeneCards to DoTS mapping",'loadGeneCards');
}

#sub to dump framefinder translations for download site

#sub dumpDoTSTranslations {
#dumpSequencesFromTable.pl --outputFile humDoTSTransl_rel5.fasta --password 'pskwa82' --idSQL "select 'DT.'||a.na_sequence_id,'[Homo sapiens]','protein identifier='||s.aa_sequence_id, s.sequence from Assembly a, rnafeature r, translatedaafeature t, translatedaasequence s where a.taxon_id = 8 and a.na_sequence_id=r.na_sequence_id and r.na_feature_id=t.na_feature_id and t.aa_sequence_id=s.aa_sequence_id" > & humDoTSTransl.log &
#alter for mus, etc
#}

sub deleteLocusLink {

    my $signal = "deleteLocusLinkToDots";

    return if $mgr->startStep("Deleting LocusLink to DoTS entries from DbRefNASequence", $signal,'loadLocusLink');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $llDbRlsId = $propertySet->getProp('locuslink_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $llDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadLocusLinkToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_LL' --pattern '\d+'  --db_id 6095";

    $mgr->runPlugin("loadGEAMapping",
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", 
		    $args, "loading LocusLink to DoTS mapping",'loadLocusLink');
}

sub deleteGEA {

    my $signal = "deleteGEAToDots";

    return if $mgr->startStep("Deleting GEA to DoTS entries from DbRefNASequence", $signal,'loadGEA');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $geaDbRlsId = $propertySet->getProp('gea_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $geaDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadGEAToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_LL' --pattern '\d+'  --db_id 6095";

    $mgr->runPlugin("loadGEAMapping",
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", 
		    $args, "loading GEA to DoTS mapping", 'loadGEA');
}

sub makeProjectLink {

    my $signal = "makeProjectLink";

    return if $mgr->startStep("Insert links between projectinfo and nasequence into projectlink table", $signal);

    my $taxonId = $propertySet->getProp('taxonId');

    my $imcloneDbRlsId = $propertySet->getProp('imclone_db_rls_id');

    my $allgenesVer = $propertySet->getProp('allgenesVersion');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $args;

    $args = "--commit --verbose --allgenes_num $allgenesVer --gusConfigFile $gusConfigFile  --taxon $taxonId --imclone_db_rls_id $imcloneDbRlsId";

    $args .= " --restart"
      if ($propertySet->getProp('projectLinkRestart') eq "yes");

    my $cmd = "makeProjectLink.pl $args";

    $mgr->runCmd($cmd);
}



#########################   extra if needed   ########################


#&insertExternalProteinSimilarities("worm-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("worm-prodom", "ExternalAASequence");

#&insertExternalProteinSimilarities("yeast-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("yeast-prodom", "ExternalAASequence");

#&insertExternalProteinSimilarities("mouse-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("mouse-prodom", "ExternalAASequence");

#&insertExternalProteinSimilarities("arabidopsis-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("arabidopsis-prodom", "ExternalAASequence");

#dtb: not sp-cdd, make sure consistent
#&insertExternalProteinSimilarities("swissprot-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("swissprot-prodom", "ExternalAASequence");

#&insertExternalProteinSimilarities("trembl-cdd", "ExternalAASequence");

#&insertExternalProteinSimilarities("trembl-prodom", "ExternalAASequence");




 #["taxonId",              "",  "eg 14 for mus"],
 #["speciesFullname",              "",  "eg Home sapiens"],
 #["speciesNickname",              "",  "eg mus, hum"],
 
 #["downloadGOStuff",   "",  "yes or no"],
 
 #["mgi_db_rls_id",   "",  "database release id for mgi"],
 
 #["prodom_db_rls_id",   "",  "a new id for the external_database_release table"],
 #["load_db_rls_id",   "",  "a new id for the external_database_release table"],
 #["pfam_db_rls_id",   "",  "a new id for the external_database_release table"],
 #["smart_db_rls_id",   "",  "a new id for the external_database_release table"],
 #["nrdb_db_rls_id" , "","the external_database_release_id for nrdb"],
 #["imclone_db_rls_id" , "","the external_database_release_id for imclone"],
 #["locuslink_db_rls_id" , "","the external_database_release_id for LL"],
 #["gea_db_rls_id" , "","the external_database_release_id for GEA"],
 #["makeNewGORules",   "",  "yes or no. Regenerate the GO rules from scratch"],
 #["GOversion",   "",  "version of GO, eg, 2.155"],
 #["GOrootId",   "",  "only until GUS 3.0, eg, 59235"],
 #["ePCRinPath",   "", "where to find e-PCR, eg /usr/local/src/bio/e-PCR/src"],
 #["buildDate" ,   "031401", "approximate start date of build"],
 #["wordfile" ,   "", "file of word probabilities for framefinder"],
 #["frameFinderRestart" ,  "","list of algorithm_invocation_id for restart of FrameFinder plugin, eg '1,2,3'"],
 #["frameFinderDir" ,  "","directory in which to find the framefinder program"],
 #["dianaDir" ,  "","directory in which to find the diana program"],
 #["userId" ,  "","database user_id from UserInfo table in GUS"],
 #["iPSRestart" , "","list of algorithm_invocation_id for restart of insertProteinSimilaritiesPK, see ffRestart"],
 #["assignDescriptionRestart" , "","list of algorithm_invocation_id for restart of AssignSequenceDescription"],
 #["loadMGI" ,  "",  "yes or no"],
 #["loadGEA" ,  "",  "yes or no"],
 #["insertTaxonRestart" , "","last ncbi_tax_id in the log for restarting LoadTaxon.pm"],
 #["nrdbRestart" , "","last set number in log for restarting LoadNrdb.pm"],
 #["nrdbTempLogin" , "","login for temp table space, e.g. pinney\@gusdev"],
 #["nrdbTempPassword" , "","password for temp table space"],
 #["loadGeneTrapAssembly", "", "yes or no"],
 #["geneTrapDbRls", "", "name:external_database_release_id abbreviation pairs for gene trap sequences e.g. stl:3692,ggtc:5393"],
 #["loadLocusLink", "", "yes or no"],
 #["projectLinkRestart", "", "yes or no"],
 #["allgenesVersion", "", "version number for allgenes, e.g. 5.0"],
 #["externalDbDir", "testbuild/externalDb", "directory for downloaded data from external databases"],
 #["genbankRel", "", "GenBank release number found in the README file"],
 #["gb_db_rel_id", "", "external_database_release_id for GenBank"],
 #["gbFiles", "", "list of comma delinieated genbank files to be parsed into GUS"],
 
 #["fly_db_rls_id", "", "database release id for fly"],
 #["worm_db_rls_id", "", "database release id for worm"],
 #["tair_db_rls_id", "", "database release id for arabidopsis"],
 #["yeast_db_rls_id", "", "database relaease id for yeast"],
 #["sp_db_rls_id", "", "database release id for swissprot"]
