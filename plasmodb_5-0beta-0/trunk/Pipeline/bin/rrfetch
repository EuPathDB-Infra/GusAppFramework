#!@perl@

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::ExternalResources::RepositoryEntry;

usage() unless scalar @ARGV > 4;

my $repositoryLoc=shift;
my $resource = shift;
my $version = shift;
my $targetDir = shift;

my %args;
foreach my $arg (@ARGV) {
  my ($k, $v) = &GUS::Pipeline::ExternalResources::RepositoryEntry::parseWgetArg($arg);
  $args{$k} = $v;
}

my $repositoryEntry = 
  GUS::Pipeline::ExternalResources::RepositoryEntry->new($repositoryLoc, 
							 $resource, 
							 $version,
							 \%args,
							 undef);

$repositoryEntry->fetch($targetDir);

sub usage {
  print "

Fetch a file from an external-resources repository.

usage:  rrfetch repositoryLoc resourceName version targetDir args

where:
  repositoryLoc - the location of the repository: path (local) or [user@]host:path (remote) 
  resourceName  - eg NRDB, Genbank
  version       - eg 1.1.2 or 2004-10-23
  targetDir     - the location to put the fetched file
  args          - a list of the form --flagArg or --valueArg=value. See below 
                  for details.

The 'args' argument may come in two forms:
  - wget args
  - manual get args

If wget args, the first must be --url which is the url at which to find the 
resource.  The rest are standard wget arguments, in any order, but, excluding 
the following (which are handled separately by rrfetch):
  --directory-prefix
  --output-file

If manual get args, the args must include --fileOrDir which is the file or 
directory in which to find the resource.   The rest are things like --contact,
--email, --phone.  They can be whatever you want, and are just stored in the 
repository as is.

Note on date versions:
  - the format for date versions is yyyy-mm-dd.
  - if the repository already contains a version for on or after that date, rrfetch will return it (the earliest found).
  - if none is found, rrfetch will acquire the files from the resource, package them in a version using today's date, and return that version.

";

exit(1);
}
