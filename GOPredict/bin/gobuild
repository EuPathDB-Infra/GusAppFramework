#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::Manager;
use GUS::Pipeline::MakeTaskDirs;
use CBIL::Util::PropertySet;
use File::Basename;

$| = 1;
umask 002;

my $propertiesFile = $ARGV[0];

&usage unless -e $propertiesFile;

# [name, default (or null if reqd), comment]
my @properties = 
(
 # properties required by Pipeline API
 ["liniacServer",         "",  "full name of liniac server"],
 ["stopBefore",   "none",  "the step to stop before.  uses the signal name"],

 # properties used by dotsbuild
 ["dotsBuildDir",         "",  "local dots update dir"],
 ["dotsRelease",          "",  "eg 5 or 6"],
 ["completedSpeciesNickName", "",  "nick name of the other species (eg mus if this is a hum build) if that one completed first. use 'notdone' if it isn't done."],
 ["reassemble",           "",  "yes or no"],
 ["serverPath",           "",  "full path of dots update dir on liniac server"],
 ["nodePath",             "",  "full path of scratch dir on liniac node"],
 ["repeatmask.taskSize",  "",  "number of seqs to process per repeatmask subtask"],
 ["repeatmask.path",      "",  "path on node of repeatmask executable"],
 ["repeatmask.options",   "",  "number of seqs to process per blastmatrix subtask"],
 ["blastmatrix.taskSize", "",  "number of seqs to process per blastmatrix subtask"],
 ["blastsimilarity.taskSize", "",  "number of seqs to process per blastsimilarity subtask"],
 ["blastsimilarity.Bparam", "", "paramter B for blastsimilarity"], 
 ["blastsimilarity.Vparam", "", "paramter V for blastsimilarity"],
 ["blastsimilarity.Eparam", "", "paramter E for blastsimilarity"],
 ["wuBlastBinPath",         "",  "path of wu blast bin dir (local)"],
 ["wuBlastBinPathLiniac",         "",  "path of wu blast bin dir on Liniac"],
 ["ncbiBlastBinPathLiniac",         "",  "path of ncbi blast bin dir on Liniac"],
 ["taxonId",              "",  "eg 14 for mus"],
 ["speciesFullname",              "",  "eg Home sapiens"],
 ["speciesNickname",              "",  "eg mus, hum"],
 ["gusConfigFile",           "",  ""],
 ["initialCluster.length",          "",  "length cutoff"],
 ["initialCluster.percent",         "",  "percent ident cutoff"],
 ["initialCluster.logbase",         "",  ""],
 ["initialCluster.consistentEnds",         "",  ""],
 ["initialCluster.cliqueSzArray",   "",  ""],
 ["initialCluster.logbaseArray",    "",  ""],
 ["intermedCluster.length",         "",  "length cutoff"],
 ["intermedCluster.percent",        "",  "percent ident cutoff"],
 ["intermedCluster.logbase",        "",  ""],
 ["intermedCluster.consistentEnds",         "",  ""],
 ["intermedCluster.cliqueSzArray",  "",  ""],
 ["intermedCluster.logbaseArray",   "",  ""],
 ["geneCluster.length",         "",  "length cutoff"],
 ["geneCluster.percent",        "",  "percent ident cutoff"],
 ["geneCluster.logbase",        "",  ""],
 ["geneCluster.consistentEnds",         "",  ""],
 ["geneCluster.cliqueSzArray",  "",  ""],
 ["geneCluster.logbaseArray",   "",  ""],
 ["downloadGenbank",   "",  "yes or no"],
 ["downloadNRDB",   "",  "yes or no"],
 ["loadGeneCards",   "",  "yes or no"],
 ["downloadGOStuff",   "",  "yes or no"],
 ["prodomRelease",   "",  "eg 2001.3"],
 ["mgi_db_rls_id",   "",  "database release id for mgi"],
 ["genecards_db_rls_id",   "",  "database release id for genecards"],
 ["prodom_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["load_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["pfam_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["smart_db_rls_id",   "",  "a new id for the external_database_release table"],
 ["nrdb_db_rls_id" , "","the external_database_release_id for nrdb"],
 ["imclone_db_rls_id" , "","the external_database_release_id for imclone"],
 ["locuslink_db_rls_id" , "","the external_database_release_id for LL"],
 ["gea_db_rls_id" , "","the external_database_release_id for GEA"],
 ["makeNewGORules",   "",  "yes or no. Regenerate the GO rules from scratch"],
 ["GOversion",   "",  "version of GO, eg, 2.155"],
 ["GOrootId",   "",  "only until GUS 3.0, eg, 59235"],
 ["ePCRinPath",   "", "where to find e-PCR, eg /usr/local/src/bio/e-PCR/src"],
 ["buildDate" ,   "031401", "approximate start date of build"],
 ["wordfile" ,   "", "file of word probabilities for framefinder"],
 ["frameFinderRestart" ,  "","list of algorithm_invocation_id for restart of FrameFinder plugin, eg '1,2,3'"],
 ["frameFinderDir" ,  "","directory in which to find the framefinder program"],
 ["dianaDir" ,  "","directory in which to find the diana program"],
 ["userId" ,  "","database user_id from UserInfo table in GUS"],
 ["iPSRestart" , "","list of algorithm_invocation_id for restart of insertProteinSimilaritiesPK, see ffRestart"],
 ["assignDescriptionRestart" , "","list of algorithm_invocation_id for restart of AssignSequenceDescription"],
 ["loadMGI" ,  "",  "yes or no"],
 ["loadGEA" ,  "",  "yes or no"],
 ["insertTaxonRestart" , "","last ncbi_tax_id in the log for restarting LoadTaxon.pm"],
 ["nrdbRestart" , "","last set number in log for restarting LoadNrdb.pm"],
 ["nrdbTempLogin" , "","login for temp table space, e.g. pinney\@gusdev"],
 ["nrdbTempPassword" , "","password for temp table space"],
 ["loadGeneTrapAssembly", "", "yes or no"],
 ["geneTrapDbRls", "", "name:external_database_release_id abbreviation pairs for gene trap sequences e.g. stl:3692,ggtc:5393"],
 ["loadLocusLink", "", "yes or no"],
 ["projectLinkRestart", "", "yes or no"],
 ["allgenesVersion", "", "version number for allgenes, e.g. 5.0"],
 ["externalDbDir", "testbuild/externalDb", "directory for downloaded data from external databases"],
 ["genbankRel", "", "GenBank release number found in the README file"],
 ["gb_db_rel_id", "", "external_database_release_id for GenBank"],
 ["gbFiles", "", "list of comma delinieated genbank files to be parsed into GUS"],
 ["downloadGOTerms", "", "yes or no"],
 ["downloadGOAssoc", "", "yes or no"],
 ["downloadWorm", "", "yes or no"],
 ["downloadFly", "", "yes or no"],
 ["downloadArabidopsis", "", "yes or no"],
 ["downloadSwissprot", "", "yes or no"],
 ["downloadTREMBL", "", "yes or no"],
 ["downloadYeast", "", "yes or no"],
 ["fly_db_rls_id", "", "database release id for fly"],
 ["worm_db_rls_id", "", "database release id for worm"],
 ["tair_db_rls_id", "", "database release id for arabidopsis"],
 ["yeast_db_rls_id", "", "database relaease id for yeast"],
 ["sp_db_rls_id", "", "database release id for swissprot"]


 ); 

my $propertySet  = CBIL::Util::PropertySet->new($propertiesFile, \@properties);

my $dotsBuildDir = $propertySet->getProp('dotsBuildDir');
my $buildName = &makeBuildName($propertySet->getProp('speciesNickname'));
my $pipelineDir = "testbuild";
#my $pipelineDir = "$dotsBuildDir/$buildName";


###################  The Pipeline  ##########################

my $mgr = GUS::Pipeline::Manager->new($pipelineDir, $propertySet, $propertiesFile);

&createDotsPipelineDir($propertySet);
   

&downloadGOTerms();

###&insertGOTerms();

&downloadGOAssoc();
&downloadFly();

&insertFly();

&downloadWorm();

&insertWorm();

&downloadYeast();

&insertYeast();

&downloadArabidopsis();

&insertArabidopsis();

&downloadSwissprot();

&insertSwissprot();

&downloadTREMBL();

###&findTREMBLWithAssociation();

###&insertTREMBLSubset();

###&insertGOAssoc();

###&extractSwissprotWithAssociations();

###&extractFlyWithAssociations();

###&copyGOSeqsToLiniac();

###&blastGOSeqsAgainstMotifs();

###&copySimsFromLiniac();

###&insertProteinSimilarities("sp-cdd", "ExternalAASequence");

###&insertProteinSimilarities("sp-prodom", "ExternalAASequence");

###&insertProteinSimilarities("fly-cdd", "ExternalAASequence");

###&insertProteinSimilarities("fly-prodom", "ExternalAASequence");

###&learnGORules();

##&applyGORules();   

###versionOldProteinGOFunc();

##&copyGOPredictions();

###&cleanGORules();



$mgr->goodbye("Pipeline complete!\n");

#########################   Pipeline Subroutines   ########################

sub createDotsPipelineDir { 
    my ($props) = @_;

    my $dotsBuildDir = $props->getProp('dotsBuildDir');
    my $serverPath = $props->getProp('serverPath');
    my $nodePath = $props->getProp('nodePath');
    my $rmTaskSize = $props->getProp('repeatmask.taskSize');
    my $rmPath = $props->getProp('repeatmask.path');
    my $rmOptions = $props->getProp('repeatmask.options');
    my $bmTaskSize = $props->getProp('blastmatrix.taskSize');
    my $bsTaskSize = $props->getProp('blastsimilarity.taskSize');
    my $bsBparam = $props->getProp('blastsimilarity.Bparam');
    my $bsVparam = $props->getProp('blastsimilarity.Vparam');
    my $bsEparam = $props->getProp('blastsimilarity.Eparam');
    my $wuBlastBinPathLiniac = $props->getProp('wuBlastBinPathLiniac');
    my $ncbiBlastBinPathLiniac = $props->getProp('ncbiBlastBinPathLiniac');

    return if (-e "$dotsBuildDir/$buildName/seqfiles");

    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/seqfiles");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/epcr");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/misc");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/genetrap");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/blastSite");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/downloadSite");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/cluster/initial");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/cluster/intermed");
    $mgr->runCmd("mkdir -p $dotsBuildDir/$buildName/cluster/gene");

    &makeRMDir("assemSeqs", $buildName, $dotsBuildDir, 
	       $serverPath, $nodePath, $rmTaskSize, $rmOptions, $rmPath);
    &makeRMDir("prevDots", $buildName, $dotsBuildDir,
	       $serverPath,  $nodePath, $rmTaskSize, $rmOptions, $rmPath);
    &makeRMDir("intermedDots", $buildName, $dotsBuildDir,
	       $serverPath,  $nodePath, $rmTaskSize, $rmOptions, $rmPath);
    &makeRMDir("finalDots", $buildName, $dotsBuildDir,
	       $serverPath,  $nodePath, $rmTaskSize, $rmOptions, $rmPath);

    &makeMatrixDir("assemSeqs", "assemSeqs", $buildName, $dotsBuildDir, 
		   $serverPath, $nodePath, $bmTaskSize, $wuBlastBinPathLiniac);
    &makeMatrixDir("prevDots", "assemSeqs", $buildName, $dotsBuildDir, 
		   $serverPath, $nodePath, $bmTaskSize, $wuBlastBinPathLiniac);
    &makeMatrixDir("prevDots", "prevDots", $buildName, $dotsBuildDir, 
		   $serverPath, $nodePath, $bmTaskSize, $wuBlastBinPathLiniac);
    &makeMatrixDir("intermedDots", "intermedDots", $buildName, $dotsBuildDir, 
		   $serverPath, $nodePath, $bmTaskSize, $wuBlastBinPathLiniac);
    &makeMatrixDir("finalDots", "finalDots", $buildName, $dotsBuildDir, 
		   $serverPath, $nodePath, $bmTaskSize, $wuBlastBinPathLiniac);

    &makeSimilarityDir("finalDots", "nrdb", $buildName, $dotsBuildDir, 
		       $serverPath, $nodePath, $bsTaskSize, 
		       $wuBlastBinPathLiniac,
		       "nrdb.fsa", '(\d+)', 'blastx', 
		       '-wordmask=seg+xnu', 'W=3', 'T=1000','B=$bsBparam','V=$bsVparam','E=$bsEparam');

    &makeSimilarityDir("finalDots", "prodom", $buildName, $dotsBuildDir, 
		       $serverPath, $nodePath, $bsTaskSize, 
		       $wuBlastBinPathLiniac,
		       "prodom.fsa", '(\S+)', 'blastx', 
		       '-wordmask=seg+xnu', 'W=3', 'T=1000','B=$bsBparam','V=$bsVparam','E=$bsEparam');

    &makeSimilarityDir("finalDots", "cdd", $buildName, $dotsBuildDir, 
		       $serverPath, $nodePath, $bsTaskSize, 
		       $ncbiBlastBinPathLiniac,
		       "cdd/All",  '\w+\|\w+\|(\S+)', 'rpsblast', 
		       '-a 2', '-e .1', '-p F');

    &makeAssemblyDir("initial", $buildName, $dotsBuildDir);
    &makeAssemblyDir("intermed", $buildName, $dotsBuildDir);

    $mgr->runCmd("chmod -R g+w $dotsBuildDir/$buildName");
}

sub makeAssemblyDir {
    my ($name, $buildName, $localDir) = @_;

    $mgr->runCmd("mkdir -p $localDir/$buildName/assembly/$name/big");
    $mgr->runCmd("mkdir -p $localDir/$buildName/assembly/$name/small");
}




    my $serverPath = $propertySet->getProp('serverPath');
    my $liniacServer = $propertySet->getProp('liniacServer');

    my $signal = "copySimilaritiesFromLiniac";
    return if $mgr->startStep("Copying protein similarities from $liniacServer", 
			 $signal);
    my @names = ("nrdb", "prodom", "cdd");
    foreach my $name (@names) {
	$mgr->copyFromLiniac($liniacServer, 
			     "$serverPath/$buildName/similarity/$name/master/mainresult", 
			     "blastSimilarity.out", 
			     "$pipelineDir/similarity/$name");
    }
    $mgr->endStep($signal);
}

sub downloadGOAssoc{
      
    my $signal = "downloadGOAssoc";
    
    return if $mgr->startStep("Downloading GO Associations", $signal, 'downloadGOAssoc');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadGoAssoc.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/goassoc/$date";
  
    $mgr->runCmd("mkdir -p $downloadSubDir");

    my $ftpsite = "ftp://ftp.geneontology.org/pub/go/gene-associations/";

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -A \"gene_association.fb, gene_association.tair, gene_association.wb, gene_association.sgd, gene_association.goa_sptr.gz\" -P $downloadSubDir $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/gene_association.goa_sptr.gz");


    $mgr->endStep($signal);

    # individual species from Go
    # maybe go to ebi or go to find file of combined trembl and swissprot
    # mapping from mgi to swissprot (ask sharon)
}

sub downloadArabidopsis {
    my $signal = "downloadArabidopsis";
    
    return if $mgr->startStep("Downloading Arabidopsis", $signal, 'downloadArabidopsis');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadArabidopsis.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/arabidopsis/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://tairpub:tairpub\@ftp.arabidopsis.org/home/tair/Sequences/blast_datasets/ATH1_pep_20020731.Z"; 
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir  $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("uncompress $downloadSubDir/ATH1_pep_20020731.Z");
    $mgr->endStep($signal);
}

sub insertArabidopsis {

#>At3g47930.1 L-galactono-1,4-lactone dehydrogenase - like protein   /  L-galactono-1,4-lactone dehydrogenase, Brassica oleracea, Z97060; supported by cDNA: gi_7707280_dbj_AB042279.1_AB042279 

    my $date = $propertySet->getProp('buildDate');

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $tairSeqFile = "$externalDbDir/arabidopsis/$date/aa_gadfly.dros.RELEASE2";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertArabidopsis.log";

    my $tairDB = $propertySet->getProp('tair_db_rls_id');
    
    #tair fasta convention: source_id name /   description

    #>At3g47930.1 L-galactono-1,4-lactone dehydrogenase - like protein   /  L-galactono-1,4-lactone dehydrogenase, Brassica oleracea, Z97060; supported by cDNA: gi_7707280_dbj_AB042279.1_AB042279 
    my $regex_src_id = "^\\>(\\S+)\\s";  
    my $regex_name = "^\\>\\S+\\s(.*)\\s\\s\\s\\/" ;
    my $regex_desc = "^\\>.*\\s\\s\\s\\/\\s+(.*)";

   my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $tairSeqFile --external_database_release_id $tairDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_desc \"$regex_desc\"";
    
    $mgr->runPlugin("insertArabidopsis", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Arabidopsis", 'downloadGOStuff');

}

sub downloadFly{
    
    my $signal = "downloadFly";
    
    return if $mgr->startStep("Downloading Fly", $signal, 'downloadFly');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';
#testbuild
    my $logfile = "$pipelineDir/logs/downloadFly.log";
#testbuild/externalDb
    my $externalDbDir = $propertySet->getProp('externalDbDir');
#031301
    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/fly/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.fruitfly.org/pub/genomic/fasta/aa_gadfly.dros.RELEASE2.Z";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("uncompress $downloadSubDir/aa_gadfly.dros.RELEASE2.Z");

    $mgr->endStep($signal);

}

sub insertFly {


    my $date = $propertySet->getProp('buildDate');
    #change to flyrelease maybe?

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $flySeqFile = "$externalDbDir/fly/$date/aa_gadfly.dros.RELEASE2";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertFly.log";

    my $flyDB = $propertySet->getProp('fly_db_rls_id');
    #fly fasta convention: name|source_id|??|secondary identifier--annotation GO functions location

#  >rho|FBgn0004635|pp-CT1008|FBan0001004 GO:[integral plasma membrane protein (GO:0005887); plasma membrane (GO:0005886); signal transduction (GO:0004871)] mol_weight=39330  located on: 3L 62A3-62A3; 
    
    my $regex_src_id = "^\\>\\w+\\|(FBgn\\w+)\\|\\S+\\s";  
    my $regex_name = "^\\>(\\w+)|FBgn\\S+\\s";
    my $regex_desc = "^\\>\\.*\\s(located.*)";
    my $regex_secondary_id = "^\\>\\S+\\|(FBan\\w+)\\S*\\s";

    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $flySeqFile --external_database_release_id $flyDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_secondary_id \"$regex_secondary_id\" --regex_desc \"$regex_desc\"";
    
    $mgr->runPlugin("insertFly", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Fly", 'downloadGOStuff');
    
    
}

sub downloadSwissprot {
    
    my $signal = "downloadSwissprot";
    
    return if $mgr->startStep("Downloading Swissprot", $signal, 'downloadSwissprot');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadSwissprot.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/swissprot/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.ebi.ac.uk/pub/databases/sp_tr_nrdb/fasta/sprot.fas.gz";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/sprot.fas.gz");

    $mgr->endStep($signal);


}

sub insertSwissprot {


    my $date = $propertySet->getProp('buildDate');
    #change to flyrelease maybe?

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $spSeqFile = "$externalDbDir/swissprot/$date/aa_gadfly.dros.RELEASE2";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertSwissprot.log";

    my $spDB = $propertySet->getProp('sp_db_rls_id');
    #6PGD_HAEIN (P43774) 6-phosphogluconate dehydrogenase, decar
    #fasta convention: name (source_id) description    

    my $regex_name = "^\\>(\\w+)\\s";
    my $regex_src_id = "^\\>\\w+\\s\\((w+)\\)\\s";  
    my $regex_desc = "^\\>\\w+\\s\\(w+\\)\\s(.*)";
    
   my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $spSeqFile --external_database_release_id $spDB --regex_source_id \"$regex_src_id\"  --regex_name \"$regex_name\"  --regex_desc \"$regex_desc\"";
    
    $mgr->runPlugin("insertSwissprot", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Swissprot", 'downloadGOStuff');

}

sub downloadTREMBL {

    my $signal = "downloadTREMBL";
    
    return if $mgr->startStep("Downloading TREMBL", $signal, 'downloadTREMBL');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';
    
    my $logfile = "$pipelineDir/logs/downloadTREMBL.log";
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/trembl/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $ftpsite = "ftp://ftp.ebi.ac.uk/pub/databases/sp_tr_nrdb/fasta/trembl.fas.gz";
    
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir $ftpsite";
    
    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/trembl.fas.gz");

    $mgr->endStep($signal);


}

sub findTREMBLWithAssociations {

}

sub insertTREMBLSubset {

}

sub downloadWorm {
    
    my $signal = "downloadWorm";
    
    return if $mgr->startStep("Downloading Worm", $signal, 'downloadWorm');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadWorm.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/worm/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    
    my $currentWorm = "wormpep93.tar";

    my $ftpsite = "ftp://ftp.wormbase.org/pub/wormbase/$currentWorm" . ".gz";
        #"current" link does not work according to Sharon

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=2 -P $downloadSubDir  $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->runCmd("gunzip $downloadSubDir/$currentWorm" . ".gz");
	
    $mgr->runCmd("tar -xf $downloadSubDir/$currentWorm --directory=$downloadSubDir");

    $mgr->endStep($signal);
}

sub insertWorm {
    my $date = $propertySet->getProp('buildDate');
    

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $wormSeqFile = "$externalDbDir/worm/$date/wormsrv2/WORMPEP/wormpep93/wormpep93";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertWorm.log";

    my $wormDB = $propertySet->getProp('worm_db_rls_id');
    #worm fasta convention: source_id secondary_id--accession number description

#    >2L52.1 CE32090   Zinc finger, C2H2 type status:Predicted TN:CAA21776 protein_id:CAA21776.2
    my $regex_src_id = "^\\>(\\S+)\s";  
    my $regex_secondary_id = "^\\>\\S+\\s+(CE\\w+)\\s";
    my $regex_desc = "^\\>\\S+\\s+CE\\w+\\s+(.*)";
    
    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $wormSeqFile --external_database_release_id $wormDB --regex_source_id \"$regex_src_id\"  --regex_secondary_id = \"$regex_secondary_id\" --regex_desc \"$regex_desc\"";
    
    $mgr->runPlugin("insertWorm", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Worm", 'downloadGOStuff');


}

sub downloadYeast {
    my $signal = "downloadYeast";
    
    return if $mgr->startStep("Downloading Yeast", $signal, 'downloadYeast');
    
    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadYeast.log";
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/yeast/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");
    

    my $ftpsite1 = "ftp://genome-ftp.stanford.edu/pub/yeast/data_download/sequence/genomic_sequence/orf_protein/orf_trans.fasta.gz";

    my $ftpsite2 = "ftp://genome-ftp.stanford.edu/pub/yeast/data_download/chromosomal_feature/chromosomal_feature.tab";
    #note: these paths are updated from previous release; make sure still getting the same data
    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=6 -P $downloadSubDir  $ftpsite1";
    my $cmd2 = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=4 -P $downloadSubDir  $ftpsite2";
        
    $mgr->runCmd($cmd);
#    $mgr->runCmd($cmd2); //don't think we need this anymore dtb 1/23/03

    $mgr->runCmd("gunzip $downloadSubDir/orf_trans.fasta.gz");


    $mgr->endStep($signal);
}

sub insertYeast {
    
    my $date = $propertySet->getProp('buildDate');
    
    my $externalDbDir = $propertySet->getProp('externalDbDir');
    
    my $yeastSeqFile = "$externalDbDir/yeast/$date/orf_trans.fasta";
    #add as property?

    my $logFile = "$pipelineDir/logs/insertYeast.log";
    
    my $yeastDB = $propertySet->getProp('yeast_db_rls_id');
    #yeast fasta convention: ORFP:source_id name SGDID:secondary_id--SGD ID, description
    #>ORFP:YAL001C TFC3 SGDID:S0000001, Chr I from 147595-147664,147755-151167, reverse complement
    
    my $regex_src_id = "^\\>ORFP:(S+)\\s";  
    my $regex_name = "^\\>\\S+\\s+(\\S+)\\s";
    my $regex_secondary_id = "^\\>\\S+\\s+SGDID:(\\S+)\\,\\s";
    my $regex_desc = "^\\>\\S+\\s+SGDID:S+\\,\\s(.+)";
    

    my $args = "--verbose --table_name DoTS::ExternalAASequence --sequencefile $yeastSeqFile --external_database_release_id $yeastDB --regex_source_id \"$regex_src_id\" --regex_name \"$regex_name\"  --regex_secondary_id = \"$regex_secondary_id\" --regex_desc \"$regex_desc\"";
    
    $mgr->runPlugin("insertYeast", 
	 	    "GUS::Common::Plugin::InsertNewExternalSequences", $args,
		    "Inserting Yeast", 'downloadGOStuff');

}

sub downloadGOTerms {

    my $signal = "downloadGOTerms";
    
    return if $mgr->startStep("Downloading GO Terms", $signal, 'downloadGOTerms');

    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadGOTerms.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/goterms/$date";

    $mgr->runCmd("mkdir -p $downloadSubDir");
 
    my $ftpsite = "ftp://ftp.geneontology.org/pub/go/ontology/function.ontology";

    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -P $downloadSubDir  $ftpsite";

    $mgr->runCmd($cmd);

    $mgr->endStep($signal);
    # function.ontology

}

sub insertGOTerms{

    # LoadGoOntology.pm
}

sub insertGOAssoc{

    # LoadGoOntology.pm
    # mapping from mgi to swissprot (ask sharon)
}

sub extractArabidopsis {

}

sub extractFly{

}

sub extractSwissprot{

}

sub extractTREMBL {

}

sub extractWorm {

}

sub extractYeast {

}

sub copyGOSeqsToLiniac{

}

sub blastGOSeqsAgainstMotifs{

}

sub copySimsFromLiniac{

}

sub learnGORules{

}

sub applyGORules{
    my $makeNewGORules = $propertySet->getProp('makeNewGORules');
    my $GOversion = $propertySet->getProp('GOversion');
    my $species = $propertySet->getProp('speciesNickname');
    my $prodom_db_id = $propertySet->getProp('prodom_db_id');
    my $load_db_id = $propertySet->getProp('load_db_id');
    my $pfam_db_id = $propertySet->getProp('pfam_db_id');
    my $smart_db_id = $propertySet->getProp('smart_db_id');
    
    my $sql = " rs.row_alg_invocation_id >= 111286 and ( rs.confidence in ('high','medium') OR (rs.confidence = 'low' AND rs.reviewer_id is NULL))";

    my $xdb = "$prodom_db_id,$load_db_id,$pfam_db_id,$smart_db_id";
    my $likeGOVer = "\%$GOversion\%";
    my $sqlFilter = "sim.pvalue_exp <= -5";
    my $ignore_existing = $makeNewGORules eq 'yes'? 0 : 1; 

    my $args = " --verbose --mode add  --rule-sql-filter \"$sql\" --guide ${species}dots --qs-type na --go-ver \"$likeGOVer\" --pv-ratio .80 --pv-threshold 1e-30 --ss-xdb $xdb --ignore-expred $ignore_existing  --sql-filter \"$sqlFilter\"";

    $mgr->runPlugin("applyGORules", "GUS::GOPredict::Plugin::MakeGoPredictions", $args, 
		    "Applying GO Rules"); 

}

sub deleteProteinGOPredictions {

    my $makeNewGORules = $propertySet->getProp('makeNewGORules');

    return if $makeNewGORules eq "yes";  # hack for now 

    my $GOversion = $propertySet->getProp('GOversion');
    my $taxonId = $propertySet->getProp('taxonId');
    
    my $sql = "SELECT pgf.protein_go_function_id FROM RNA r, Protein p, ProteinGoFunction pgf, GOFunction gf,  Assembly ass, RNASequence rs, NAFeature naf  WHERE ass.taxon_id = $taxonId and ass.na_sequence_id = naf.na_sequence_id and naf.na_feature_id = rs.na_feature_id and r.rna_id = rs.rna_id and p.rna_id = r.rna_id and  pgf.protein_id = p.protein_id and pgf.manually_reviewed = 0 and pgf.go_function_id = gf.go_function_id and gf.go_cvs_version  = '$GOversion'";

    my $args = "--idSQL \"$sql\" --table_name 'ProteinGOFunction' --primary_key 'protein_go_function_id'";

    $mgr->runPlugin("deleteProteinGOPredictions", "GUS::GOPredict::Plugin::DeleteGoPredictions", 
	
	    $args, "Deleting Protein GO predictions"); 

}

sub copyGOPredictions {

    my $GOversion = $propertySet->getProp('GOversion');
    my $taxonId = $propertySet->getProp('taxonId');
    my $GOrootId = $propertySet->getProp('GOrootId');

    my $alg_inv_id = 125852;  # must be obtained for current run of MakeGoPredictions - see applyGORules sub

    # HACK: must hard code the alg_inv_id (this sub is going away next build)

    # remove the following line when you have set $alg_inv_id for hum
    #$mgr->error("MUST SET alg_inv_id in copyGOPredictions()") if ($taxonId != 14);
    
    my $idSQL = "select aa_sequence_go_function_id from aasequencegofunction where row_alg_invocation_id = $alg_inv_id and go_function_id != $GOrootId";

    my $idExclSQL = "select distinct pgf.protein_id from RNA r, Protein p, ProteinGoFunction pgf, GOFunction gf, Assembly ass, RNASequence rs, NAFeature naf where ass.taxon_id = $taxonId and ass.na_sequence_id = naf.na_sequence_id and naf.na_feature_id = rs .na_feature_id and r.rna_id = rs.rna_id and p.rna_id = r.rna_id and pgf.protein_id = p.protein_id and pgf.manually_reviewed = 1 and pgf.go_function_id = gf.go_function_id and gf.go_cvs_version  = '$GOversion'";

    my $args = "--idSQL \"$idSQL\" --idExclSQL \"$idExclSQL\" --verbose";

    $mgr->runPlugin("copyGOPredictions", "GUS::GOPredict::Plugin::CopyAASeqGoFuncToProtGoFunc", $args, 
		    "Copying GO predictions from AA to Protein"); 
}


sub cleanGORules{
    my $taxonId = $propertySet->getProp('taxonId');
}


sub downloadMGIInfo {

    my $signal = "downloadMGIInfo";

    return if $mgr->startStep("Downloading MGI Info", $signal,'loadMGI');

    $ENV{ftp_proxy} = 'http://proxy.pcbi.upenn.edu:3128/';

    my $logfile = "$pipelineDir/logs/downloadMGIInfo.log";

    my $externalDbDir = $propertySet->getProp('externalDbDir');

    my $date = $propertySet->getProp('buildDate');

    my $downloadSubDir = "$externalDbDir/mgi/$date";
    
    $mgr->runCmd("mkdir -p $downloadSubDir");


    my $cmd = "wget -t5 -o $logfile -b -m -np -nd -nH --cut-dirs=3 -A \"MRK_List2.sql.rpt\"  -P $downloadSubDir  ftp://www.informatics.jax.org/pub/informatics/reports/";

#I think this ftp site needs to be updated to
# ftp://www.informatics.jax.org/pub/reports/ --dtb 1/13/3

    $mgr->runCmd($cmd);

    $mgr->endStep($signal);
} 

sub deleteMGIToDots {
    
    my $signal = "deleteMGIToDots";

    return if $mgr->startStep("Deleting MGI to DoTS entries from DbRefNASequence", $signal,'loadMGI');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $mgiDbRlsId = $propertySet->getProp('mgi_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $mgiDbRlsId";

    my $cmd = "deleteEntries.pl --table DoTS.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadMGIToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_MGI' --pattern '\d+' --db_id 4893";

    $mgr->runPlugin("loadMGIMapping", "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", $args, "loading MGI to DoTS mapping",'loadMGI');
}

sub loadMGIInfo {

    my $args = "--inputfile /usr/local/db/local/mgi/MRK_List2.sql.rpt";

    $mgr->runPlugin("loadMGIInfo", "DoTS::DotsBuild::Plugin::LoadMGIInfo", $args, "Loading MGI Info",'loadMGI' );
    
}

sub deleteGeneCardsToDots {

    my $signal = "deleteGeneCardsToDots";

    return if $mgr->startStep("Deleting GeneCards to DoTS entries from DbRefNASequence", $signal,'loadGeneCards');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $geneCardsDbRlsId = $propertySet->getProp('genecards_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $geneCardsDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}
    
sub loadGeneCardsToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_GeneCards' --pattern '\S+' --db_id 4892";

    $mgr->runPlugin("loadGeneCardsMapping", 
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence",
		    $args,
		    "loading GeneCards to DoTS mapping",'loadGeneCards');
}

#sub to dump framefinder translations for download site

#sub dumpDoTSTranslations {
#dumpSequencesFromTable.pl --outputFile humDoTSTransl_rel5.fasta --password 'pskwa82' --idSQL "select 'DT.'||a.na_sequence_id,'[Homo sapiens]','protein identifier='||s.aa_sequence_id, s.sequence from Assembly a, rnafeature r, translatedaafeature t, translatedaasequence s where a.taxon_id = 8 and a.na_sequence_id=r.na_sequence_id and r.na_feature_id=t.na_feature_id and t.aa_sequence_id=s.aa_sequence_id" > & humDoTSTransl.log &
#alter for mus, etc
#}

sub deleteLocusLink {

    my $signal = "deleteLocusLinkToDots";

    return if $mgr->startStep("Deleting LocusLink to DoTS entries from DbRefNASequence", $signal,'loadLocusLink');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $llDbRlsId = $propertySet->getProp('locuslink_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $llDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadLocusLinkToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_LL' --pattern '\d+'  --db_id 6095";

    $mgr->runPlugin("loadGEAMapping",
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", 
		    $args, "loading LocusLink to DoTS mapping",'loadLocusLink');
}

sub deleteGEA {

    my $signal = "deleteGEAToDots";

    return if $mgr->startStep("Deleting GEA to DoTS entries from DbRefNASequence", $signal,'loadGEA');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $geaDbRlsId = $propertySet->getProp('gea_db_rls_id');

    my $logFile = "$pipelineDir/logs/${signal}.log";

    my $sql = "select db_ref_id from sres.dbref where external_database_release_id = $geaDbRlsId";

    my $cmd = "deleteEntries.pl --table SRes.DbRefNASequence --idSQL \"$sql\" --gusConfigFile $gusConfigFile --verbose 2>> $logFile";

    $mgr->runCmd($cmd);

}

sub loadGEAToDoTS {

    my $args = "--mappingfiles '$pipelineDir/misc/DoTS_2_LL' --pattern '\d+'  --db_id 6095";

    $mgr->runPlugin("loadGEAMapping",
		    "GUS::Common::Plugin::InsertDbRefAndDbRefNASequence", 
		    $args, "loading GEA to DoTS mapping", 'loadGEA');
}

sub makeProjectLink {

    my $signal = "makeProjectLink";

    return if $mgr->startStep("Insert links between projectinfo and nasequence into projectlink table", $signal);

    my $taxonId = $propertySet->getProp('taxonId');

    my $imcloneDbRlsId = $propertySet->getProp('imclone_db_rls_id');

    my $allgenesVer = $propertySet->getProp('allgenesVersion');

    my $gusConfigFile = $propertySet->getProp('gusConfigFile');

    my $args;

    $args = "--commit --verbose --allgenes_num $allgenesVer --gusConfigFile $gusConfigFile  --taxon $taxonId --imclone_db_rls_id $imcloneDbRlsId";

    $args .= " --restart"
      if ($propertySet->getProp('projectLinkRestart') eq "yes");

    my $cmd = "makeProjectLink.pl $args";

    $mgr->runCmd($cmd);
}

sub makeBuildName {
  my ($nickName) = @_;

  return "release" . $propertySet->getProp('dotsRelease') . "/" . $nickName;
}

sub usage {
    print STDERR "usage:  dotsbuild propertiesfile\n";
    exit 1;
}



