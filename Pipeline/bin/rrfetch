#!@perl@

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::ExternalResources::RepositoryEntry;

usage() unless scalar @ARGV > 6;

my $repositoryLoc=shift;
my $resource = shift;
my $version = shift;
my $targetDir = shift;
my $sourceUrl = shift;

my %wgetArgs;
foreach my $arg (@ARGV) {
  my ($k, $v) = &GUS::Pipeline::ExternalResources::RepositoryEntry::parseWgetArg($arg);
  $wgetArgs{$k} = $v;
}

my $repositoryEntry = 
  GUS::Pipeline::ExternalResources::RepositoryEntry->new($repositoryLoc, 
							 $resource, 
							 $version,
							 $sourceUrl, 
							 \%wgetArgs,
							 undef);

$repositoryEntry->fetch($targetDir);

sub usage {
  print "

Fetch a file from an external-resources repository.

usage:  rrfetch repositoryLoc resourceName version targetDir sourceUrl wgetArgs

where:
  repositoryLoc - the location of the repository (either path for local or host:path for remote) 
  resourceName  - eg NRDB, Genbank
  version       - eg 1.1.2 or 2004-10-23
  targetDir     - the location to put the fetched file
  sourceUrl     - the URL to provide to wget
  wgetArgs      - is a list of the form --flagArg or --valueArg=value

exclude the following wget args (sfetch handles them):
  --directory-prefix
  --output-file

Note on date versions:
  - the format for date versions is yyyy-mm-dd.
  - if the repository already contains a version for on or after that date, rrfetch will return it (the earliest found).
  - if none is found, rrfetch will acquire the files from the resource, package them in a version using today's date, and return that version.

";

exit(1);
}
