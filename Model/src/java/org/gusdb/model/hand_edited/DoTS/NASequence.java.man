package org.gusdb.model.DoTS;

import java.sql.*;

import org.biojava.bio.*;
import org.biojava.bio.seq.*;
import org.biojava.bio.seq.io.*;
import org.biojava.bio.symbol.*;

import java.util.*;

import java.math.*;

import java.util.Date;
import org.gusdb.objrelj.*;

/**
 * NASequence.java.man
 *
 * Wrapper class that contains methods specific for manipulating
 * DNA and protein sequences.
 *
 * @author Dave Barkan
 * @version $Revision$ $Date$ $Author$
 */
public class NASequence extends NASequence_Row {

    // Constructor
    public NASequence () {}

    /**
     * Retrieve entire sequence as a BioJava SymbolList.  Will fail if the
     * the entire sequence is not cached locally.
     */
    public SymbolList getSequenceAsSymbolList() {
	return this.getSequenceAsSymbolList(1, this.getSequenceLobLength().longValue());
    }

    /**
     * Retrieve the requested subsequence as a BioJava SymbolList.  Will fail if the
     * the requested subsequence is not cached locally.
     */
    public SymbolList getSequenceAsSymbolList(long start, long end) {
	SymbolList result = null;

	FiniteAlphabet dnaAlphabet = DNATools.getDNA();
	char seqData[] = this.getSequence(start, end);

	if (seqData != null) {
	    try {
		result = DNATools.createDNA(new String(seqData));
	    } 
	    catch(IllegalSymbolException ise) {
		ise.printStackTrace(System.err);
	    }
	}

	return result;
    } 

} // NASequence
